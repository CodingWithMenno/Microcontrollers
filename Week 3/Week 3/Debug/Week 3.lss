
Week 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c46  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3c  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005df  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000265  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000283d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	93 c0       	rjmp	.+294    	; 0x14c <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	93 d0       	rcall	.+294    	; 0x1ea <main>
  c4:	9b c0       	rjmp	.+310    	; 0x1fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:

	// Second nibble
	PORTC = (byte<<4);
	PORTC |= (1<<LCD_RS);
	confirmCommand();
}
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	08 c0       	rjmp	.+16     	; 0xde <wait+0x16>
  ce:	ef ec       	ldi	r30, 0xCF	; 207
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wait+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wait+0x10>
  d8:	00 00       	nop
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	ac f3       	brlt	.-22     	; 0xce <wait+0x6>
  e4:	08 95       	ret

000000e6 <confirmCommand>:
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	eb df       	rcall	.-42     	; 0xc8 <wait>
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <wait>
  fe:	08 95       	ret

00000100 <write_command>:
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
 104:	85 bb       	out	0x15, r24	; 21
 106:	85 b3       	in	r24, 0x15	; 21
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	ec df       	rcall	.-40     	; 0xe6 <confirmCommand>
 10e:	c2 95       	swap	r28
 110:	c0 7f       	andi	r28, 0xF0	; 240
 112:	c5 bb       	out	0x15, r28	; 21
 114:	85 b3       	in	r24, 0x15	; 21
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	85 bb       	out	0x15, r24	; 21
 11a:	e5 df       	rcall	.-54     	; 0xe6 <confirmCommand>
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <clearDisplay>:
	write_command(0x06); //Entry mode set
}

void clearDisplay()
{
	write_command(0x01); //Clear display
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	ee cf       	rjmp	.-36     	; 0x100 <write_command>
 124:	08 95       	ret

00000126 <init>:
static void write_command(unsigned char);
static void write_data(unsigned char);
static void wait(int);

void init()
{
 126:	cf 93       	push	r28
	DDRC = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 12c:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x28;	// function set
 12e:	c8 e2       	ldi	r28, 0x28	; 40
 130:	c5 bb       	out	0x15, r28	; 21
	confirmCommand();
 132:	d9 df       	rcall	.-78     	; 0xe6 <confirmCommand>

	PORTC = 0x28;   // function set
	confirmCommand();
 134:	c5 bb       	out	0x15, r28	; 21
 136:	d7 df       	rcall	.-82     	; 0xe6 <confirmCommand>
	PORTC = 0x80;
 138:	80 e8       	ldi	r24, 0x80	; 128
	confirmCommand();
 13a:	85 bb       	out	0x15, r24	; 21

	clearDisplay();
 13c:	d4 df       	rcall	.-88     	; 0xe6 <confirmCommand>

	write_command(0x0F); //Display on/off control
 13e:	f0 df       	rcall	.-32     	; 0x120 <clearDisplay>
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	de df       	rcall	.-68     	; 0x100 <write_command>
	
	write_command(0x06); //Entry mode set
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	dc df       	rcall	.-72     	; 0x100 <write_command>
 148:	cf 91       	pop	r28
}
 14a:	08 95       	ret

0000014c <__vector_9>:
 14c:	1f 92       	push	r1
	return 1;
}

//Interrupt method voor timer 2
ISR(TIMER2_COMP_vect)
{
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	//Houd bij wat de milliseconden zijn
	static int msCount = 0;
	msCount++;
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 16a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
	static bool isHigh = true;
	
	if (isHigh && msCount == 15)
 16e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	22 23       	and	r18, r18
 174:	61 f0       	breq	.+24     	; 0x18e <__vector_9+0x42>
 176:	8f 30       	cpi	r24, 0x0F	; 15
 178:	91 05       	cpc	r25, r1
 17a:	49 f4       	brne	.+18     	; 0x18e <__vector_9+0x42>
	{
		isHigh = false;
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		msCount = 0;
 180:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		
		//Forceer D7 naar laag
		PORTD &= ~BIT(7);
 188:	82 b3       	in	r24, 0x12	; 18
 18a:	12 ba       	out	0x12, r1	; 18
 18c:	0e c0       	rjmp	.+28     	; 0x1aa <__vector_9+0x5e>
	} else if (!isHigh && msCount == 25)
 18e:	21 11       	cpse	r18, r1
 190:	0c c0       	rjmp	.+24     	; 0x1aa <__vector_9+0x5e>
 192:	49 97       	sbiw	r24, 0x19	; 25
 194:	51 f4       	brne	.+20     	; 0x1aa <__vector_9+0x5e>
	{
		isHigh = true;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		msCount = 0;
 19c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1a0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		
		//Forceer D7 naar hoog
		PORTD |= BIT(7);
 1a4:	82 b3       	in	r24, 0x12	; 18
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	82 bb       	out	0x12, r24	; 18
	}
}
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <timer2Init>:

void timer2Init()
{
	//Elke ms een interrupt
	OCR2 = 250;
 1ba:	8a ef       	ldi	r24, 0xFA	; 250
 1bc:	83 bd       	out	0x23, r24	; 35
	
	//Zet de compare modus aan
	TIMSK |= BIT(7);
 1be:	87 b7       	in	r24, 0x37	; 55
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	87 bf       	out	0x37, r24	; 55
	
	//Zet het interrupt systeem aan
	sei();
 1c4:	78 94       	sei
	
	//Initialiseer de timer met prescaler van 32
	//TCCR2 = 0b00001101;
	TCCR2 = 0x0C;
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	85 bd       	out	0x25, r24	; 37
 1ca:	08 95       	ret

000001cc <wait>:
}

void wait(int ms)
{
	for (int i = 0; i < ms; i++)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	ef ec       	ldi	r30, 0xCF	; 207
 1d4:	f7 e0       	ldi	r31, 0x07	; 7
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <wait+0xa>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <wait+0x10>
 1dc:	00 00       	nop
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	28 17       	cp	r18, r24
 1e4:	39 07       	cpc	r19, r25
 1e6:	ac f3       	brlt	.-22     	; 0x1d2 <wait+0x6>
	{
		_delay_ms(1);
	}
}
 1e8:	08 95       	ret

000001ea <main>:
void timer2Init();

int main(void)
{
	//Init the lcd module
    init();
 1ea:	9d df       	rcall	.-198    	; 0x126 <init>
	
	//Forceer D7 naar een output
	DDRD |= BIT(7);
 1ec:	81 b3       	in	r24, 0x11	; 17
 1ee:	80 68       	ori	r24, 0x80	; 128
	
	//Init de timer 2
	timer2Init();
 1f0:	81 bb       	out	0x11, r24	; 17
 1f2:	e3 df       	rcall	.-58     	; 0x1ba <timer2Init>
	
	while (1) { wait(100); }
 1f4:	84 e6       	ldi	r24, 0x64	; 100
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	e9 df       	rcall	.-46     	; 0x1cc <wait>
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <main+0xa>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
