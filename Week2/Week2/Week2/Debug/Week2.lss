
Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a99  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ac  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000408  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	60 d0       	rcall	.+192    	; 0x174 <main>
  b4:	68 c0       	rjmp	.+208    	; 0x186 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
	confirmCommand();
}

void wait(int ms)
{
	for (int i = 0; i < ms; i++)
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 c0       	rjmp	.+16     	; 0xce <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	ef ec       	ldi	r30, 0xCF	; 207
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <wait+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <wait+0x10>
  c8:	00 00       	nop
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	28 17       	cp	r18, r24
  d0:	39 07       	cpc	r19, r25
  d2:	ac f3       	brlt	.-22     	; 0xbe <wait+0x6>
	{
		_delay_ms(1);
	}
  d4:	08 95       	ret

000000d6 <confirmCommand>:
	write_command(0x01); //Clear display
}

void confirmCommand()
{
	PORTC |= (1<<LCD_E);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	85 bb       	out	0x15, r24	; 21
	wait(1);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	eb df       	rcall	.-42     	; 0xb8 <wait>
	PORTC &= ~(1<<LCD_E);
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	85 bb       	out	0x15, r24	; 21
	wait(1);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	e5 cf       	rjmp	.-54     	; 0xb8 <wait>
  ee:	08 95       	ret

000000f0 <write_command>:
		write_data(*str);
	}
}

void write_command(unsigned char byte)
{
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
  f4:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	85 bb       	out	0x15, r24	; 21
	confirmCommand();
  fc:	ec df       	rcall	.-40     	; 0xd6 <confirmCommand>

	// Second nibble
	PORTC = (byte<<4);
  fe:	c2 95       	swap	r28
 100:	c0 7f       	andi	r28, 0xF0	; 240
 102:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	8b 7f       	andi	r24, 0xFB	; 251
	confirmCommand();
 108:	85 bb       	out	0x15, r24	; 21
 10a:	e5 df       	rcall	.-54     	; 0xd6 <confirmCommand>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <clearDisplay>:
	write_command(0x06); //Entry mode set
}

void clearDisplay()
{
	write_command(0x01); //Clear display
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	ee cf       	rjmp	.-36     	; 0xf0 <write_command>
 114:	08 95       	ret

00000116 <init_4bits_mode>:

	return 1;
}

void init_4bits_mode()
{
 116:	cf 93       	push	r28
	DDRC = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 11c:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x28;	// function set
 11e:	c8 e2       	ldi	r28, 0x28	; 40
 120:	c5 bb       	out	0x15, r28	; 21
	confirmCommand();
 122:	d9 df       	rcall	.-78     	; 0xd6 <confirmCommand>

	PORTC = 0x28;   // function set
	confirmCommand();
 124:	c5 bb       	out	0x15, r28	; 21
 126:	d7 df       	rcall	.-82     	; 0xd6 <confirmCommand>
	PORTC = 0x80;
 128:	80 e8       	ldi	r24, 0x80	; 128
	confirmCommand();
 12a:	85 bb       	out	0x15, r24	; 21

	clearDisplay();
 12c:	d4 df       	rcall	.-88     	; 0xd6 <confirmCommand>

	write_command(0x0F); //Display on/off control
 12e:	f0 df       	rcall	.-32     	; 0x110 <clearDisplay>
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	de df       	rcall	.-68     	; 0xf0 <write_command>
	
	write_command(0x06); //Entry mode set
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	dc df       	rcall	.-72     	; 0xf0 <write_command>
 138:	cf 91       	pop	r28
}
 13a:	08 95       	ret

0000013c <write_data>:
 13c:	cf 93       	push	r28
	PORTC = (byte<<4);
	PORTC &= ~(1<<LCD_RS);
	confirmCommand();
}

void write_data(unsigned char byte) {
 13e:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 140:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 142:	85 b3       	in	r24, 0x15	; 21
 144:	84 60       	ori	r24, 0x04	; 4
 146:	85 bb       	out	0x15, r24	; 21
	confirmCommand();
 148:	c6 df       	rcall	.-116    	; 0xd6 <confirmCommand>

	// Second nibble
	PORTC = (byte<<4);
 14a:	c2 95       	swap	r28
 14c:	c0 7f       	andi	r28, 0xF0	; 240
 14e:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 150:	85 b3       	in	r24, 0x15	; 21
 152:	84 60       	ori	r24, 0x04	; 4
	confirmCommand();
 154:	85 bb       	out	0x15, r24	; 21
 156:	bf df       	rcall	.-130    	; 0xd6 <confirmCommand>
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <write_string>:
	PORTC &= ~(1<<LCD_E);
	wait(1);
}

void write_string(char *str) 
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
	for(;*str; str++)
 162:	02 c0       	rjmp	.+4      	; 0x168 <write_string+0xc>
	{
		write_data(*str);
 164:	eb df       	rcall	.-42     	; 0x13c <write_data>
	wait(1);
}

void write_string(char *str) 
{
	for(;*str; str++)
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	fb cf       	rjmp	.-10     	; 0x164 <write_string+0x8>
	{
		write_data(*str);
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <main>:
void clearDisplay();


int main( void ) {

	init_4bits_mode();
 174:	d0 df       	rcall	.-96     	; 0x116 <init_4bits_mode>
	
	write_string("Test");
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
	clearDisplay();
 17a:	f0 df       	rcall	.-32     	; 0x15c <write_string>
	write_string("hoi");
 17c:	c9 df       	rcall	.-110    	; 0x110 <clearDisplay>
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	ec df       	rcall	.-40     	; 0x15c <write_string>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x10>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
