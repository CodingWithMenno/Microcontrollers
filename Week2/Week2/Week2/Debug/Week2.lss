
Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000170  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095d  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  00001c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1d d0       	rcall	.+58     	; 0xfe <main>
  c4:	53 c0       	rjmp	.+166    	; 0x16c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <setDisplayDigit>:
	return 1;
}

void setDisplayDigit(int digit)
{
	if (digit < 0 || digit > 15)
  c8:	80 31       	cpi	r24, 0x10	; 16
  ca:	91 05       	cpc	r25, r1
  cc:	18 f0       	brcs	.+6      	; 0xd4 <setDisplayDigit+0xc>
	{
		DDRA = hexNumbers[16];
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret
	} else
	{
		DDRA = hexNumbers[digit];
  d4:	fc 01       	movw	r30, r24
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	08 95       	ret

000000e0 <wait>:
	}
}

void wait(int ms)
{
	for (int i = 0; i < ms; i++)
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef ec       	ldi	r30, 0xCF	; 207
  e8:	f7 e0       	ldi	r31, 0x07	; 7
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <wait+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <wait+0x10>
  f0:	00 00       	nop
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	ac f3       	brlt	.-22     	; 0xe6 <wait+0x6>
	{
		_delay_ms(1);
	}
  fc:	08 95       	ret

000000fe <main>:
};

int currentDigit;

int main( void ) {
	currentDigit = 0;
  fe:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 102:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	
	PORTA = 0xFF; //Zet alles van poort A op output
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x00; //Zet alles van poort B op input
 10a:	18 ba       	out	0x18, r1	; 24

	while(1)
	{
		if (PINB & 0x01 && PINB & 0x02)
 10c:	b0 9b       	sbis	0x16, 0	; 22
 10e:	07 c0       	rjmp	.+14     	; 0x11e <main+0x20>
 110:	b1 9b       	sbis	0x16, 1	; 22
 112:	05 c0       	rjmp	.+10     	; 0x11e <main+0x20>
		{
			currentDigit = 0;
 114:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 118:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 11c:	1e c0       	rjmp	.+60     	; 0x15a <main+0x5c>
		} else if (PINB & 0x01 && currentDigit <= 16)
 11e:	b0 9b       	sbis	0x16, 0	; 22
 120:	0d c0       	rjmp	.+26     	; 0x13c <main+0x3e>
 122:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 126:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 12a:	81 31       	cpi	r24, 0x11	; 17
 12c:	91 05       	cpc	r25, r1
 12e:	34 f4       	brge	.+12     	; 0x13c <main+0x3e>
		{
			currentDigit++;
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 136:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 13a:	0f c0       	rjmp	.+30     	; 0x15a <main+0x5c>
		} else if (PINB & 0x02 && currentDigit >= -1)
 13c:	b1 9b       	sbis	0x16, 1	; 22
 13e:	0d c0       	rjmp	.+26     	; 0x15a <main+0x5c>
 140:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 144:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	92 07       	cpc	r25, r18
 14e:	2c f0       	brlt	.+10     	; 0x15a <main+0x5c>
		{
			currentDigit--;
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 156:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		}
		
		setDisplayDigit(currentDigit);
 15a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 15e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 162:	b2 df       	rcall	.-156    	; 0xc8 <setDisplayDigit>
		
		wait(200);
 164:	88 ec       	ldi	r24, 0xC8	; 200
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	bb df       	rcall	.-138    	; 0xe0 <wait>
	}
 16a:	d0 cf       	rjmp	.-96     	; 0x10c <main+0xe>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
