
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000988  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000868  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	21 d0       	rcall	.+66     	; 0xdc <main>
  9a:	3a c0       	rjmp	.+116    	; 0x110 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <timer1Init>:

}

void timer1Init()
{
	OCR1A = 250;				// Sets the compare value of timer 1
  9e:	8a ef       	ldi	r24, 0xFA	; 250
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42
	ICR1 = 10000;				// Sets the upper limit to timer 1
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	97 e2       	ldi	r25, 0x27	; 39
  aa:	97 bd       	out	0x27, r25	; 39
  ac:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10000010;		// Set OC1A as output
  ae:	82 e8       	ldi	r24, 0x82	; 130
  b0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
  b2:	82 e1       	ldi	r24, 0x12	; 18
  b4:	8e bd       	out	0x2e, r24	; 46
  b6:	08 95       	ret

000000b8 <setPwmTargetValue>:
}

void setPwmTargetValue(int value)
{
	OCR1A = value;
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
  bc:	08 95       	ret

000000be <wait>:
}

void wait(int ms)
{
	for (int tms=0; tms<ms; tms++)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	ef ec       	ldi	r30, 0xCF	; 207
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <wait+0xa>
  cc:	00 c0       	rjmp	.+0      	; 0xce <wait+0x10>
  ce:	00 00       	nop
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	28 17       	cp	r18, r24
  d6:	39 07       	cpc	r19, r25
  d8:	ac f3       	brlt	.-22     	; 0xc4 <wait+0x6>
		_delay_ms(1);
  da:	08 95       	ret

000000dc <main>:
void timer1Init();
void setPwmTargetValue(int);

// Main program: Counting on T1
int main( void )
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
	DDRB = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  e4:	dc df       	rcall	.-72     	; 0x9e <timer1Init>
	wait(1000);
  e6:	88 ee       	ldi	r24, 0xE8	; 232
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	e9 df       	rcall	.-46     	; 0xbe <wait>
	
	for (int i = 250; i < 2500; i++)
  ec:	ca ef       	ldi	r28, 0xFA	; 250
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setPwmTargetValue(i);
  f0:	06 c0       	rjmp	.+12     	; 0xfe <main+0x22>
  f2:	ce 01       	movw	r24, r28
		wait(1);
  f4:	e1 df       	rcall	.-62     	; 0xb8 <setPwmTargetValue>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e1 df       	rcall	.-62     	; 0xbe <wait>
{
	DDRB = 0xFF;
	timer1Init();
	wait(1000);
	
	for (int i = 250; i < 2500; i++)
  fc:	21 96       	adiw	r28, 0x01	; 1
  fe:	c4 3c       	cpi	r28, 0xC4	; 196
 100:	89 e0       	ldi	r24, 0x09	; 9
 102:	d8 07       	cpc	r29, r24
 104:	b4 f3       	brlt	.-20     	; 0xf2 <main+0x16>
	{
		setPwmTargetValue(i);
		wait(1);
	}

}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
