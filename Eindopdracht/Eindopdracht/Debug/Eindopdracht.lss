
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000007c2  00000856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1f  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000439  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000423  00000000  00000000  00002822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002c45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a8 c0       	rjmp	.+336    	; 0x182 <__vector_12>
  32:	00 00       	nop
  34:	2a c1       	rjmp	.+596    	; 0x28a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	7c c3       	rjmp	.+1784   	; 0x7be <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int servo2_targetValue;


int main( void )
{
	DDRB = 0xFF;				// Set whole port B as output
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	servo_init();
  cc:	0b d0       	rcall	.+22     	; 0xe4 <servo_init>
		//wait(10000);
		//servo1_targetValue = 0;
		//servo2_targetValue = 180;
		//wait(10000);
		
		servo1_targetValue = 90;
  ce:	8a e5       	ldi	r24, 0x5A	; 90
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
  d6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		servo2_targetValue = 90;
  da:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <servo2_targetValue+0x1>
  de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <servo2_targetValue>
  e2:	f5 cf       	rjmp	.-22     	; 0xce <main+0x6>

000000e4 <servo_init>:
	OCR1B = currentValue;
}

void servo_init()
{
	OCR1A = startValue1;		// Sets the compare value of timer 1, (this is linked to port B5)
  e4:	8a ef       	ldi	r24, 0xFA	; 250
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	9b bd       	out	0x2b, r25	; 43
  ea:	8a bd       	out	0x2a, r24	; 42
	OCR1B = startValue2;		// Sets the compare value of timer 1, (this is linked to port B6)
  ec:	99 bd       	out	0x29, r25	; 41
  ee:	88 bd       	out	0x28, r24	; 40
	
	servo1_targetValue = startValue1;
  f0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
  f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	servo2_targetValue = startValue2;
  f8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <servo2_targetValue+0x1>
  fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <servo2_targetValue>
	
	TIMSK |= 1<<(3);			// Turn on compare mode for channel A
 100:	87 b7       	in	r24, 0x37	; 55
 102:	88 60       	ori	r24, 0x08	; 8
 104:	87 bf       	out	0x37, r24	; 55
	TIMSK |= 1<<(4);			// Turn on compare mode for channel B
 106:	87 b7       	in	r24, 0x37	; 55
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	87 bf       	out	0x37, r24	; 55
	sei();						// Turn on interrupt system
 10c:	78 94       	sei
	
	ICR1 = 10000;				// Sets the upper limit to timer 1
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	97 e2       	ldi	r25, 0x27	; 39
 112:	97 bd       	out	0x27, r25	; 39
 114:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10100010;		// Set OC1B as output
 116:	82 ea       	ldi	r24, 0xA2	; 162
 118:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
 11a:	82 e1       	ldi	r24, 0x12	; 18
 11c:	8e bd       	out	0x2e, r24	; 46
 11e:	08 95       	ret

00000120 <map>:
}

double map(double value, int newMin, int newMax)
{
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8a 01       	movw	r16, r20
 132:	e9 01       	movw	r28, r18
	// Maps the value between two numbers: https://stackoverflow.com/questions/345187/math-mapping-numbers
	return (value - 0) / (180 - 0) * (newMax - newMin) + newMin;
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	44 e3       	ldi	r20, 0x34	; 52
 13a:	53 e4       	ldi	r21, 0x43	; 67
 13c:	93 d1       	rcall	.+806    	; 0x464 <__divsf3>
 13e:	6b 01       	movw	r12, r22
 140:	7c 01       	movw	r14, r24
 142:	be 01       	movw	r22, r28
 144:	60 1b       	sub	r22, r16
 146:	71 0b       	sbc	r23, r17
 148:	07 2e       	mov	r0, r23
 14a:	00 0c       	add	r0, r0
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	1f d2       	rcall	.+1086   	; 0x590 <__floatsisf>
 152:	a7 01       	movw	r20, r14
 154:	96 01       	movw	r18, r12
 156:	d0 d2       	rcall	.+1440   	; 0x6f8 <__mulsf3>
 158:	6b 01       	movw	r12, r22
 15a:	7c 01       	movw	r14, r24
 15c:	b8 01       	movw	r22, r16
 15e:	11 0f       	add	r17, r17
 160:	88 0b       	sbc	r24, r24
 162:	99 0b       	sbc	r25, r25
 164:	15 d2       	rcall	.+1066   	; 0x590 <__floatsisf>
 166:	9b 01       	movw	r18, r22
 168:	ac 01       	movw	r20, r24
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	12 d1       	rcall	.+548    	; 0x394 <__addsf3>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

00000182 <__vector_12>:
int servo1_targetValue;
int servo2_targetValue;


ISR(TIMER1_COMPA_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0b b6       	in	r0, 0x3b	; 59
 18e:	0f 92       	push	r0
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	// Go slow to target value
	const float speed = 1;
	static float currentValue = startValue1;
	
	// Maps the value from 0-180 to 250-1500 (frequency of the servo)
	float targetValue = map(servo1_targetValue, 250, 1300);
 1b8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end>
 1bc:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__data_end+0x1>
 1c0:	07 2e       	mov	r0, r23
 1c2:	00 0c       	add	r0, r0
 1c4:	88 0b       	sbc	r24, r24
 1c6:	99 0b       	sbc	r25, r25
 1c8:	e3 d1       	rcall	.+966    	; 0x590 <__floatsisf>
 1ca:	24 e1       	ldi	r18, 0x14	; 20
 1cc:	35 e0       	ldi	r19, 0x05	; 5
 1ce:	4a ef       	ldi	r20, 0xFA	; 250
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	a6 df       	rcall	.-180    	; 0x120 <map>
 1d4:	4b 01       	movw	r8, r22
 1d6:	5c 01       	movw	r10, r24
	
	if (currentValue < targetValue)
 1d8:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <currentValue.1948>
 1dc:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <currentValue.1948+0x1>
 1e0:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <currentValue.1948+0x2>
 1e4:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <currentValue.1948+0x3>
 1e8:	a7 01       	movw	r20, r14
 1ea:	96 01       	movw	r18, r12
 1ec:	81 d2       	rcall	.+1282   	; 0x6f0 <__gesf2>
 1ee:	18 16       	cp	r1, r24
 1f0:	84 f4       	brge	.+32     	; 0x212 <__vector_12+0x90>
	currentValue += speed;
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e8       	ldi	r20, 0x80	; 128
 1f8:	5f e3       	ldi	r21, 0x3F	; 63
 1fa:	c7 01       	movw	r24, r14
 1fc:	b6 01       	movw	r22, r12
 1fe:	ca d0       	rcall	.+404    	; 0x394 <__addsf3>
 200:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <currentValue.1948>
 204:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <currentValue.1948+0x1>
 208:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <currentValue.1948+0x2>
 20c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <currentValue.1948+0x3>
 210:	16 c0       	rjmp	.+44     	; 0x23e <__vector_12+0xbc>
	else if (currentValue > targetValue)
 212:	a7 01       	movw	r20, r14
 214:	96 01       	movw	r18, r12
 216:	c5 01       	movw	r24, r10
 218:	b4 01       	movw	r22, r8
 21a:	20 d1       	rcall	.+576    	; 0x45c <__cmpsf2>
 21c:	88 23       	and	r24, r24
 21e:	7c f4       	brge	.+30     	; 0x23e <__vector_12+0xbc>
	currentValue -= speed;
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e8       	ldi	r20, 0x80	; 128
 226:	5f e3       	ldi	r21, 0x3F	; 63
 228:	c7 01       	movw	r24, r14
 22a:	b6 01       	movw	r22, r12
 22c:	b2 d0       	rcall	.+356    	; 0x392 <__subsf3>
 22e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <currentValue.1948>
 232:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <currentValue.1948+0x1>
 236:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <currentValue.1948+0x2>
 23a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <currentValue.1948+0x3>
	
	OCR1A = currentValue;
 23e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <currentValue.1948>
 242:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <currentValue.1948+0x1>
 246:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <currentValue.1948+0x2>
 24a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <currentValue.1948+0x3>
 24e:	72 d1       	rcall	.+740    	; 0x534 <__fixunssfsi>
 250:	7b bd       	out	0x2b, r23	; 43
 252:	6a bd       	out	0x2a, r22	; 42
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	bf 90       	pop	r11
 276:	af 90       	pop	r10
 278:	9f 90       	pop	r9
 27a:	8f 90       	pop	r8
 27c:	0f 90       	pop	r0
 27e:	0b be       	out	0x3b, r0	; 59
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_13>:

ISR(TIMER1_COMPB_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	0b b6       	in	r0, 0x3b	; 59
 296:	0f 92       	push	r0
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	// Go slow to target value
	const float speed = 1;
	static float currentValue = startValue2;
	
	// Maps the value from 0-180 to 250-1300 (frequency of the servo)
	float targetValue = map(servo2_targetValue, 250, 1300);
 2c0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servo2_targetValue>
 2c4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <servo2_targetValue+0x1>
 2c8:	07 2e       	mov	r0, r23
 2ca:	00 0c       	add	r0, r0
 2cc:	88 0b       	sbc	r24, r24
 2ce:	99 0b       	sbc	r25, r25
 2d0:	5f d1       	rcall	.+702    	; 0x590 <__floatsisf>
 2d2:	24 e1       	ldi	r18, 0x14	; 20
 2d4:	35 e0       	ldi	r19, 0x05	; 5
 2d6:	4a ef       	ldi	r20, 0xFA	; 250
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	22 df       	rcall	.-444    	; 0x120 <map>
 2dc:	4b 01       	movw	r8, r22
 2de:	5c 01       	movw	r10, r24
	
	if (currentValue < targetValue)
 2e0:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e4:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ec:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2f0:	a7 01       	movw	r20, r14
 2f2:	96 01       	movw	r18, r12
 2f4:	fd d1       	rcall	.+1018   	; 0x6f0 <__gesf2>
 2f6:	18 16       	cp	r1, r24
 2f8:	84 f4       	brge	.+32     	; 0x31a <__vector_13+0x90>
	currentValue += speed;
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e8       	ldi	r20, 0x80	; 128
 300:	5f e3       	ldi	r21, 0x3F	; 63
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	46 d0       	rcall	.+140    	; 0x394 <__addsf3>
 308:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 30c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 310:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 314:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 318:	16 c0       	rjmp	.+44     	; 0x346 <__vector_13+0xbc>
	else if (currentValue > targetValue)
 31a:	a7 01       	movw	r20, r14
 31c:	96 01       	movw	r18, r12
 31e:	c5 01       	movw	r24, r10
 320:	b4 01       	movw	r22, r8
 322:	9c d0       	rcall	.+312    	; 0x45c <__cmpsf2>
 324:	88 23       	and	r24, r24
 326:	7c f4       	brge	.+30     	; 0x346 <__vector_13+0xbc>
	currentValue -= speed;
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e8       	ldi	r20, 0x80	; 128
 32e:	5f e3       	ldi	r21, 0x3F	; 63
 330:	c7 01       	movw	r24, r14
 332:	b6 01       	movw	r22, r12
 334:	2e d0       	rcall	.+92     	; 0x392 <__subsf3>
 336:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 33e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 342:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	OCR1B = currentValue;
 346:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 352:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 356:	ee d0       	rcall	.+476    	; 0x534 <__fixunssfsi>
 358:	79 bd       	out	0x29, r23	; 41
 35a:	68 bd       	out	0x28, r22	; 40
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	bf 90       	pop	r11
 37e:	af 90       	pop	r10
 380:	9f 90       	pop	r9
 382:	8f 90       	pop	r8
 384:	0f 90       	pop	r0
 386:	0b be       	out	0x3b, r0	; 59
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__subsf3>:
 392:	50 58       	subi	r21, 0x80	; 128

00000394 <__addsf3>:
 394:	bb 27       	eor	r27, r27
 396:	aa 27       	eor	r26, r26
 398:	0e d0       	rcall	.+28     	; 0x3b6 <__addsf3x>
 39a:	70 c1       	rjmp	.+736    	; 0x67c <__fp_round>
 39c:	61 d1       	rcall	.+706    	; 0x660 <__fp_pscA>
 39e:	30 f0       	brcs	.+12     	; 0x3ac <__addsf3+0x18>
 3a0:	66 d1       	rcall	.+716    	; 0x66e <__fp_pscB>
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <__addsf3+0x18>
 3a4:	31 f4       	brne	.+12     	; 0x3b2 <__addsf3+0x1e>
 3a6:	9f 3f       	cpi	r25, 0xFF	; 255
 3a8:	11 f4       	brne	.+4      	; 0x3ae <__addsf3+0x1a>
 3aa:	1e f4       	brtc	.+6      	; 0x3b2 <__addsf3+0x1e>
 3ac:	56 c1       	rjmp	.+684    	; 0x65a <__fp_nan>
 3ae:	0e f4       	brtc	.+2      	; 0x3b2 <__addsf3+0x1e>
 3b0:	e0 95       	com	r30
 3b2:	e7 fb       	bst	r30, 7
 3b4:	4c c1       	rjmp	.+664    	; 0x64e <__fp_inf>

000003b6 <__addsf3x>:
 3b6:	e9 2f       	mov	r30, r25
 3b8:	72 d1       	rcall	.+740    	; 0x69e <__fp_split3>
 3ba:	80 f3       	brcs	.-32     	; 0x39c <__addsf3+0x8>
 3bc:	ba 17       	cp	r27, r26
 3be:	62 07       	cpc	r22, r18
 3c0:	73 07       	cpc	r23, r19
 3c2:	84 07       	cpc	r24, r20
 3c4:	95 07       	cpc	r25, r21
 3c6:	18 f0       	brcs	.+6      	; 0x3ce <__addsf3x+0x18>
 3c8:	71 f4       	brne	.+28     	; 0x3e6 <__addsf3x+0x30>
 3ca:	9e f5       	brtc	.+102    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3cc:	8a c1       	rjmp	.+788    	; 0x6e2 <__fp_zero>
 3ce:	0e f4       	brtc	.+2      	; 0x3d2 <__addsf3x+0x1c>
 3d0:	e0 95       	com	r30
 3d2:	0b 2e       	mov	r0, r27
 3d4:	ba 2f       	mov	r27, r26
 3d6:	a0 2d       	mov	r26, r0
 3d8:	0b 01       	movw	r0, r22
 3da:	b9 01       	movw	r22, r18
 3dc:	90 01       	movw	r18, r0
 3de:	0c 01       	movw	r0, r24
 3e0:	ca 01       	movw	r24, r20
 3e2:	a0 01       	movw	r20, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	ff 27       	eor	r31, r31
 3e8:	59 1b       	sub	r21, r25
 3ea:	99 f0       	breq	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ec:	59 3f       	cpi	r21, 0xF9	; 249
 3ee:	50 f4       	brcc	.+20     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f0:	50 3e       	cpi	r21, 0xE0	; 224
 3f2:	68 f1       	brcs	.+90     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3f4:	1a 16       	cp	r1, r26
 3f6:	f0 40       	sbci	r31, 0x00	; 0
 3f8:	a2 2f       	mov	r26, r18
 3fa:	23 2f       	mov	r18, r19
 3fc:	34 2f       	mov	r19, r20
 3fe:	44 27       	eor	r20, r20
 400:	58 5f       	subi	r21, 0xF8	; 248
 402:	f3 cf       	rjmp	.-26     	; 0x3ea <__addsf3x+0x34>
 404:	46 95       	lsr	r20
 406:	37 95       	ror	r19
 408:	27 95       	ror	r18
 40a:	a7 95       	ror	r26
 40c:	f0 40       	sbci	r31, 0x00	; 0
 40e:	53 95       	inc	r21
 410:	c9 f7       	brne	.-14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 412:	7e f4       	brtc	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 414:	1f 16       	cp	r1, r31
 416:	ba 0b       	sbc	r27, r26
 418:	62 0b       	sbc	r22, r18
 41a:	73 0b       	sbc	r23, r19
 41c:	84 0b       	sbc	r24, r20
 41e:	ba f0       	brmi	.+46     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 420:	91 50       	subi	r25, 0x01	; 1
 422:	a1 f0       	breq	.+40     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 424:	ff 0f       	add	r31, r31
 426:	bb 1f       	adc	r27, r27
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	c2 f7       	brpl	.-16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 430:	0e c0       	rjmp	.+28     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 432:	ba 0f       	add	r27, r26
 434:	62 1f       	adc	r22, r18
 436:	73 1f       	adc	r23, r19
 438:	84 1f       	adc	r24, r20
 43a:	48 f4       	brcc	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43c:	87 95       	ror	r24
 43e:	77 95       	ror	r23
 440:	67 95       	ror	r22
 442:	b7 95       	ror	r27
 444:	f7 95       	ror	r31
 446:	9e 3f       	cpi	r25, 0xFE	; 254
 448:	08 f0       	brcs	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	b3 cf       	rjmp	.-154    	; 0x3b2 <__addsf3+0x1e>
 44c:	93 95       	inc	r25
 44e:	88 0f       	add	r24, r24
 450:	08 f0       	brcs	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	99 27       	eor	r25, r25
 454:	ee 0f       	add	r30, r30
 456:	97 95       	ror	r25
 458:	87 95       	ror	r24
 45a:	08 95       	ret

0000045c <__cmpsf2>:
 45c:	d4 d0       	rcall	.+424    	; 0x606 <__fp_cmp>
 45e:	08 f4       	brcc	.+2      	; 0x462 <__cmpsf2+0x6>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	08 95       	ret

00000464 <__divsf3>:
 464:	0c d0       	rcall	.+24     	; 0x47e <__divsf3x>
 466:	0a c1       	rjmp	.+532    	; 0x67c <__fp_round>
 468:	02 d1       	rcall	.+516    	; 0x66e <__fp_pscB>
 46a:	40 f0       	brcs	.+16     	; 0x47c <__divsf3+0x18>
 46c:	f9 d0       	rcall	.+498    	; 0x660 <__fp_pscA>
 46e:	30 f0       	brcs	.+12     	; 0x47c <__divsf3+0x18>
 470:	21 f4       	brne	.+8      	; 0x47a <__divsf3+0x16>
 472:	5f 3f       	cpi	r21, 0xFF	; 255
 474:	19 f0       	breq	.+6      	; 0x47c <__divsf3+0x18>
 476:	eb c0       	rjmp	.+470    	; 0x64e <__fp_inf>
 478:	51 11       	cpse	r21, r1
 47a:	34 c1       	rjmp	.+616    	; 0x6e4 <__fp_szero>
 47c:	ee c0       	rjmp	.+476    	; 0x65a <__fp_nan>

0000047e <__divsf3x>:
 47e:	0f d1       	rcall	.+542    	; 0x69e <__fp_split3>
 480:	98 f3       	brcs	.-26     	; 0x468 <__divsf3+0x4>

00000482 <__divsf3_pse>:
 482:	99 23       	and	r25, r25
 484:	c9 f3       	breq	.-14     	; 0x478 <__divsf3+0x14>
 486:	55 23       	and	r21, r21
 488:	b1 f3       	breq	.-20     	; 0x476 <__divsf3+0x12>
 48a:	95 1b       	sub	r25, r21
 48c:	55 0b       	sbc	r21, r21
 48e:	bb 27       	eor	r27, r27
 490:	aa 27       	eor	r26, r26
 492:	62 17       	cp	r22, r18
 494:	73 07       	cpc	r23, r19
 496:	84 07       	cpc	r24, r20
 498:	38 f0       	brcs	.+14     	; 0x4a8 <__divsf3_pse+0x26>
 49a:	9f 5f       	subi	r25, 0xFF	; 255
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	44 1f       	adc	r20, r20
 4a4:	aa 1f       	adc	r26, r26
 4a6:	a9 f3       	breq	.-22     	; 0x492 <__divsf3_pse+0x10>
 4a8:	33 d0       	rcall	.+102    	; 0x510 <__divsf3_pse+0x8e>
 4aa:	0e 2e       	mov	r0, r30
 4ac:	3a f0       	brmi	.+14     	; 0x4bc <__divsf3_pse+0x3a>
 4ae:	e0 e8       	ldi	r30, 0x80	; 128
 4b0:	30 d0       	rcall	.+96     	; 0x512 <__divsf3_pse+0x90>
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	e6 95       	lsr	r30
 4b8:	00 1c       	adc	r0, r0
 4ba:	ca f7       	brpl	.-14     	; 0x4ae <__divsf3_pse+0x2c>
 4bc:	29 d0       	rcall	.+82     	; 0x510 <__divsf3_pse+0x8e>
 4be:	fe 2f       	mov	r31, r30
 4c0:	27 d0       	rcall	.+78     	; 0x510 <__divsf3_pse+0x8e>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	bb 1f       	adc	r27, r27
 4ca:	26 17       	cp	r18, r22
 4cc:	37 07       	cpc	r19, r23
 4ce:	48 07       	cpc	r20, r24
 4d0:	ab 07       	cpc	r26, r27
 4d2:	b0 e8       	ldi	r27, 0x80	; 128
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__divsf3_pse+0x56>
 4d6:	bb 0b       	sbc	r27, r27
 4d8:	80 2d       	mov	r24, r0
 4da:	bf 01       	movw	r22, r30
 4dc:	ff 27       	eor	r31, r31
 4de:	93 58       	subi	r25, 0x83	; 131
 4e0:	5f 4f       	sbci	r21, 0xFF	; 255
 4e2:	2a f0       	brmi	.+10     	; 0x4ee <__divsf3_pse+0x6c>
 4e4:	9e 3f       	cpi	r25, 0xFE	; 254
 4e6:	51 05       	cpc	r21, r1
 4e8:	68 f0       	brcs	.+26     	; 0x504 <__divsf3_pse+0x82>
 4ea:	b1 c0       	rjmp	.+354    	; 0x64e <__fp_inf>
 4ec:	fb c0       	rjmp	.+502    	; 0x6e4 <__fp_szero>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	ec f3       	brlt	.-6      	; 0x4ec <__divsf3_pse+0x6a>
 4f2:	98 3e       	cpi	r25, 0xE8	; 232
 4f4:	dc f3       	brlt	.-10     	; 0x4ec <__divsf3_pse+0x6a>
 4f6:	86 95       	lsr	r24
 4f8:	77 95       	ror	r23
 4fa:	67 95       	ror	r22
 4fc:	b7 95       	ror	r27
 4fe:	f7 95       	ror	r31
 500:	9f 5f       	subi	r25, 0xFF	; 255
 502:	c9 f7       	brne	.-14     	; 0x4f6 <__divsf3_pse+0x74>
 504:	88 0f       	add	r24, r24
 506:	91 1d       	adc	r25, r1
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret
 510:	e1 e0       	ldi	r30, 0x01	; 1
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	bb 1f       	adc	r27, r27
 51a:	62 17       	cp	r22, r18
 51c:	73 07       	cpc	r23, r19
 51e:	84 07       	cpc	r24, r20
 520:	ba 07       	cpc	r27, r26
 522:	20 f0       	brcs	.+8      	; 0x52c <__divsf3_pse+0xaa>
 524:	62 1b       	sub	r22, r18
 526:	73 0b       	sbc	r23, r19
 528:	84 0b       	sbc	r24, r20
 52a:	ba 0b       	sbc	r27, r26
 52c:	ee 1f       	adc	r30, r30
 52e:	88 f7       	brcc	.-30     	; 0x512 <__divsf3_pse+0x90>
 530:	e0 95       	com	r30
 532:	08 95       	ret

00000534 <__fixunssfsi>:
 534:	bc d0       	rcall	.+376    	; 0x6ae <__fp_splitA>
 536:	88 f0       	brcs	.+34     	; 0x55a <__fixunssfsi+0x26>
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	90 f0       	brcs	.+36     	; 0x560 <__fixunssfsi+0x2c>
 53c:	b9 2f       	mov	r27, r25
 53e:	99 27       	eor	r25, r25
 540:	b7 51       	subi	r27, 0x17	; 23
 542:	a0 f0       	brcs	.+40     	; 0x56c <__fixunssfsi+0x38>
 544:	d1 f0       	breq	.+52     	; 0x57a <__fixunssfsi+0x46>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a f0       	brmi	.+6      	; 0x556 <__fixunssfsi+0x22>
 550:	ba 95       	dec	r27
 552:	c9 f7       	brne	.-14     	; 0x546 <__fixunssfsi+0x12>
 554:	12 c0       	rjmp	.+36     	; 0x57a <__fixunssfsi+0x46>
 556:	b1 30       	cpi	r27, 0x01	; 1
 558:	81 f0       	breq	.+32     	; 0x57a <__fixunssfsi+0x46>
 55a:	c3 d0       	rcall	.+390    	; 0x6e2 <__fp_zero>
 55c:	b1 e0       	ldi	r27, 0x01	; 1
 55e:	08 95       	ret
 560:	c0 c0       	rjmp	.+384    	; 0x6e2 <__fp_zero>
 562:	67 2f       	mov	r22, r23
 564:	78 2f       	mov	r23, r24
 566:	88 27       	eor	r24, r24
 568:	b8 5f       	subi	r27, 0xF8	; 248
 56a:	39 f0       	breq	.+14     	; 0x57a <__fixunssfsi+0x46>
 56c:	b9 3f       	cpi	r27, 0xF9	; 249
 56e:	cc f3       	brlt	.-14     	; 0x562 <__fixunssfsi+0x2e>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b3 95       	inc	r27
 578:	d9 f7       	brne	.-10     	; 0x570 <__fixunssfsi+0x3c>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__fixunssfsi+0x56>
 57c:	90 95       	com	r25
 57e:	80 95       	com	r24
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__floatunsisf>:
 58c:	e8 94       	clt
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__floatsisf+0x12>

00000590 <__floatsisf>:
 590:	97 fb       	bst	r25, 7
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__floatsisf+0x12>
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	99 23       	and	r25, r25
 5a4:	a9 f0       	breq	.+42     	; 0x5d0 <__floatsisf+0x40>
 5a6:	f9 2f       	mov	r31, r25
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	bb 27       	eor	r27, r27
 5ac:	93 95       	inc	r25
 5ae:	f6 95       	lsr	r31
 5b0:	87 95       	ror	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b7 95       	ror	r27
 5b8:	f1 11       	cpse	r31, r1
 5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <__floatsisf+0x1c>
 5bc:	fa f4       	brpl	.+62     	; 0x5fc <__floatsisf+0x6c>
 5be:	bb 0f       	add	r27, r27
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <__floatsisf+0x36>
 5c2:	60 ff       	sbrs	r22, 0
 5c4:	1b c0       	rjmp	.+54     	; 0x5fc <__floatsisf+0x6c>
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	16 c0       	rjmp	.+44     	; 0x5fc <__floatsisf+0x6c>
 5d0:	88 23       	and	r24, r24
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <__floatsisf+0x48>
 5d4:	96 e9       	ldi	r25, 0x96	; 150
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <__floatsisf+0x6a>
 5d8:	77 23       	and	r23, r23
 5da:	21 f0       	breq	.+8      	; 0x5e4 <__floatsisf+0x54>
 5dc:	9e e8       	ldi	r25, 0x8E	; 142
 5de:	87 2f       	mov	r24, r23
 5e0:	76 2f       	mov	r23, r22
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__floatsisf+0x5e>
 5e4:	66 23       	and	r22, r22
 5e6:	71 f0       	breq	.+28     	; 0x604 <__floatsisf+0x74>
 5e8:	96 e8       	ldi	r25, 0x86	; 134
 5ea:	86 2f       	mov	r24, r22
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	2a f0       	brmi	.+10     	; 0x5fc <__floatsisf+0x6c>
 5f2:	9a 95       	dec	r25
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	da f7       	brpl	.-10     	; 0x5f2 <__floatsisf+0x62>
 5fc:	88 0f       	add	r24, r24
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__fp_cmp>:
 606:	99 0f       	add	r25, r25
 608:	00 08       	sbc	r0, r0
 60a:	55 0f       	add	r21, r21
 60c:	aa 0b       	sbc	r26, r26
 60e:	e0 e8       	ldi	r30, 0x80	; 128
 610:	fe ef       	ldi	r31, 0xFE	; 254
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	e8 07       	cpc	r30, r24
 618:	f9 07       	cpc	r31, r25
 61a:	c0 f0       	brcs	.+48     	; 0x64c <__fp_cmp+0x46>
 61c:	12 16       	cp	r1, r18
 61e:	13 06       	cpc	r1, r19
 620:	e4 07       	cpc	r30, r20
 622:	f5 07       	cpc	r31, r21
 624:	98 f0       	brcs	.+38     	; 0x64c <__fp_cmp+0x46>
 626:	62 1b       	sub	r22, r18
 628:	73 0b       	sbc	r23, r19
 62a:	84 0b       	sbc	r24, r20
 62c:	95 0b       	sbc	r25, r21
 62e:	39 f4       	brne	.+14     	; 0x63e <__fp_cmp+0x38>
 630:	0a 26       	eor	r0, r26
 632:	61 f0       	breq	.+24     	; 0x64c <__fp_cmp+0x46>
 634:	23 2b       	or	r18, r19
 636:	24 2b       	or	r18, r20
 638:	25 2b       	or	r18, r21
 63a:	21 f4       	brne	.+8      	; 0x644 <__fp_cmp+0x3e>
 63c:	08 95       	ret
 63e:	0a 26       	eor	r0, r26
 640:	09 f4       	brne	.+2      	; 0x644 <__fp_cmp+0x3e>
 642:	a1 40       	sbci	r26, 0x01	; 1
 644:	a6 95       	lsr	r26
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	81 1d       	adc	r24, r1
 64a:	81 1d       	adc	r24, r1
 64c:	08 95       	ret

0000064e <__fp_inf>:
 64e:	97 f9       	bld	r25, 7
 650:	9f 67       	ori	r25, 0x7F	; 127
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	08 95       	ret

0000065a <__fp_nan>:
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	08 95       	ret

00000660 <__fp_pscA>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	09 06       	cpc	r0, r25
 66c:	08 95       	ret

0000066e <__fp_pscB>:
 66e:	00 24       	eor	r0, r0
 670:	0a 94       	dec	r0
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	05 06       	cpc	r0, r21
 67a:	08 95       	ret

0000067c <__fp_round>:
 67c:	09 2e       	mov	r0, r25
 67e:	03 94       	inc	r0
 680:	00 0c       	add	r0, r0
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0xc>
 684:	88 23       	and	r24, r24
 686:	52 f0       	brmi	.+20     	; 0x69c <__fp_round+0x20>
 688:	bb 0f       	add	r27, r27
 68a:	40 f4       	brcc	.+16     	; 0x69c <__fp_round+0x20>
 68c:	bf 2b       	or	r27, r31
 68e:	11 f4       	brne	.+4      	; 0x694 <__fp_round+0x18>
 690:	60 ff       	sbrs	r22, 0
 692:	04 c0       	rjmp	.+8      	; 0x69c <__fp_round+0x20>
 694:	6f 5f       	subi	r22, 0xFF	; 255
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <__fp_split3>:
 69e:	57 fd       	sbrc	r21, 7
 6a0:	90 58       	subi	r25, 0x80	; 128
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	59 f0       	breq	.+22     	; 0x6be <__fp_splitA+0x10>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__fp_splitA+0x1a>
 6ac:	47 95       	ror	r20

000006ae <__fp_splitA>:
 6ae:	88 0f       	add	r24, r24
 6b0:	97 fb       	bst	r25, 7
 6b2:	99 1f       	adc	r25, r25
 6b4:	61 f0       	breq	.+24     	; 0x6ce <__fp_splitA+0x20>
 6b6:	9f 3f       	cpi	r25, 0xFF	; 255
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <__fp_splitA+0x2a>
 6ba:	87 95       	ror	r24
 6bc:	08 95       	ret
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	f2 cf       	rjmp	.-28     	; 0x6ac <__fp_split3+0xe>
 6c8:	46 95       	lsr	r20
 6ca:	f1 df       	rcall	.-30     	; 0x6ae <__fp_splitA>
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <__fp_splitA+0x30>
 6ce:	16 16       	cp	r1, r22
 6d0:	17 06       	cpc	r1, r23
 6d2:	18 06       	cpc	r1, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	f1 cf       	rjmp	.-30     	; 0x6ba <__fp_splitA+0xc>
 6d8:	86 95       	lsr	r24
 6da:	71 05       	cpc	r23, r1
 6dc:	61 05       	cpc	r22, r1
 6de:	08 94       	sec
 6e0:	08 95       	ret

000006e2 <__fp_zero>:
 6e2:	e8 94       	clt

000006e4 <__fp_szero>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	66 27       	eor	r22, r22
 6e8:	77 27       	eor	r23, r23
 6ea:	cb 01       	movw	r24, r22
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__gesf2>:
 6f0:	8a df       	rcall	.-236    	; 0x606 <__fp_cmp>
 6f2:	08 f4       	brcc	.+2      	; 0x6f6 <__gesf2+0x6>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__mulsf3>:
 6f8:	0b d0       	rcall	.+22     	; 0x710 <__mulsf3x>
 6fa:	c0 cf       	rjmp	.-128    	; 0x67c <__fp_round>
 6fc:	b1 df       	rcall	.-158    	; 0x660 <__fp_pscA>
 6fe:	28 f0       	brcs	.+10     	; 0x70a <__mulsf3+0x12>
 700:	b6 df       	rcall	.-148    	; 0x66e <__fp_pscB>
 702:	18 f0       	brcs	.+6      	; 0x70a <__mulsf3+0x12>
 704:	95 23       	and	r25, r21
 706:	09 f0       	breq	.+2      	; 0x70a <__mulsf3+0x12>
 708:	a2 cf       	rjmp	.-188    	; 0x64e <__fp_inf>
 70a:	a7 cf       	rjmp	.-178    	; 0x65a <__fp_nan>
 70c:	11 24       	eor	r1, r1
 70e:	ea cf       	rjmp	.-44     	; 0x6e4 <__fp_szero>

00000710 <__mulsf3x>:
 710:	c6 df       	rcall	.-116    	; 0x69e <__fp_split3>
 712:	a0 f3       	brcs	.-24     	; 0x6fc <__mulsf3+0x4>

00000714 <__mulsf3_pse>:
 714:	95 9f       	mul	r25, r21
 716:	d1 f3       	breq	.-12     	; 0x70c <__mulsf3+0x14>
 718:	95 0f       	add	r25, r21
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	55 1f       	adc	r21, r21
 71e:	62 9f       	mul	r22, r18
 720:	f0 01       	movw	r30, r0
 722:	72 9f       	mul	r23, r18
 724:	bb 27       	eor	r27, r27
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	63 9f       	mul	r22, r19
 72c:	aa 27       	eor	r26, r26
 72e:	f0 0d       	add	r31, r0
 730:	b1 1d       	adc	r27, r1
 732:	aa 1f       	adc	r26, r26
 734:	64 9f       	mul	r22, r20
 736:	66 27       	eor	r22, r22
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	66 1f       	adc	r22, r22
 73e:	82 9f       	mul	r24, r18
 740:	22 27       	eor	r18, r18
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	73 9f       	mul	r23, r19
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	62 1f       	adc	r22, r18
 750:	83 9f       	mul	r24, r19
 752:	a0 0d       	add	r26, r0
 754:	61 1d       	adc	r22, r1
 756:	22 1f       	adc	r18, r18
 758:	74 9f       	mul	r23, r20
 75a:	33 27       	eor	r19, r19
 75c:	a0 0d       	add	r26, r0
 75e:	61 1d       	adc	r22, r1
 760:	23 1f       	adc	r18, r19
 762:	84 9f       	mul	r24, r20
 764:	60 0d       	add	r22, r0
 766:	21 1d       	adc	r18, r1
 768:	82 2f       	mov	r24, r18
 76a:	76 2f       	mov	r23, r22
 76c:	6a 2f       	mov	r22, r26
 76e:	11 24       	eor	r1, r1
 770:	9f 57       	subi	r25, 0x7F	; 127
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	8a f0       	brmi	.+34     	; 0x798 <__mulsf3_pse+0x84>
 776:	e1 f0       	breq	.+56     	; 0x7b0 <__mulsf3_pse+0x9c>
 778:	88 23       	and	r24, r24
 77a:	4a f0       	brmi	.+18     	; 0x78e <__mulsf3_pse+0x7a>
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	bb 1f       	adc	r27, r27
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	91 50       	subi	r25, 0x01	; 1
 78a:	50 40       	sbci	r21, 0x00	; 0
 78c:	a9 f7       	brne	.-22     	; 0x778 <__mulsf3_pse+0x64>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	70 f0       	brcs	.+28     	; 0x7b0 <__mulsf3_pse+0x9c>
 794:	5c cf       	rjmp	.-328    	; 0x64e <__fp_inf>
 796:	a6 cf       	rjmp	.-180    	; 0x6e4 <__fp_szero>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	ec f3       	brlt	.-6      	; 0x796 <__mulsf3_pse+0x82>
 79c:	98 3e       	cpi	r25, 0xE8	; 232
 79e:	dc f3       	brlt	.-10     	; 0x796 <__mulsf3_pse+0x82>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f7 95       	ror	r31
 7aa:	e7 95       	ror	r30
 7ac:	9f 5f       	subi	r25, 0xFF	; 255
 7ae:	c1 f7       	brne	.-16     	; 0x7a0 <__mulsf3_pse+0x8c>
 7b0:	fe 2b       	or	r31, r30
 7b2:	88 0f       	add	r24, r24
 7b4:	91 1d       	adc	r25, r1
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
