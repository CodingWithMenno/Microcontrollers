
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000052e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a25  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  0000226a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	11 d0       	rcall	.+34     	; 0xcc <main>
  aa:	05 c2       	rjmp	.+1034   	; 0x4b6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
	return 1;
}

void wait(int ms)
{
	for (int tms=0; tms<ms; tms++)
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <wait+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <wait+0x10>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	ac f3       	brlt	.-22     	; 0xb4 <wait+0x6>
		_delay_ms(1);
  ca:	08 95       	ret

000000cc <main>:
int servo_targetValue;


int main( void )
{
	servo1_init();
  cc:	92 d0       	rcall	.+292    	; 0x1f2 <servo1_init>
	//wait(1000);
	
	while (1)
	{		
		servo_targetValue = 250;
  ce:	8a ef       	ldi	r24, 0xFA	; 250
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo_targetValue+0x1>
  d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo_targetValue>
		wait(10000);
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	97 e2       	ldi	r25, 0x27	; 39
  de:	e7 df       	rcall	.-50     	; 0xae <wait>
		servo_targetValue = 1500;
  e0:	8c ed       	ldi	r24, 0xDC	; 220
  e2:	95 e0       	ldi	r25, 0x05	; 5
  e4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo_targetValue+0x1>
  e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo_targetValue>
		wait(10000);
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	de df       	rcall	.-68     	; 0xae <wait>
  f2:	ed cf       	rjmp	.-38     	; 0xce <main+0x2>

000000f4 <__vector_12>:
// Extern variable for the servo target value
int servo_targetValue;


ISR(TIMER1_COMPA_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	0b b6       	in	r0, 0x3b	; 59
 100:	0f 92       	push	r0
 102:	8f 92       	push	r8
 104:	9f 92       	push	r9
 106:	af 92       	push	r10
 108:	bf 92       	push	r11
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	static float currentValue = startValue;
	
	// Maps the value from 0-180 to 250-1500 (frequency of the servo)
	//float targetValue = MAP(servo_targetValue);
	
	if (currentValue < servo_targetValue)
 12a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo_targetValue>
 12e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <servo_targetValue+0x1>
 132:	07 2e       	mov	r0, r23
 134:	00 0c       	add	r0, r0
 136:	88 0b       	sbc	r24, r24
 138:	99 0b       	sbc	r25, r25
 13a:	09 d1       	rcall	.+530    	; 0x34e <__floatsisf>
 13c:	4b 01       	movw	r8, r22
 13e:	5c 01       	movw	r10, r24
 140:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 14c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 150:	a7 01       	movw	r20, r14
 152:	96 01       	movw	r18, r12
 154:	ac d1       	rcall	.+856    	; 0x4ae <__gesf2>
 156:	18 16       	cp	r1, r24
 158:	84 f4       	brge	.+32     	; 0x17a <__vector_12+0x86>
	currentValue += speed;
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e8       	ldi	r20, 0x80	; 128
 160:	5f e3       	ldi	r21, 0x3F	; 63
 162:	c7 01       	movw	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	5d d0       	rcall	.+186    	; 0x222 <__addsf3>
 168:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 16c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 174:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 178:	16 c0       	rjmp	.+44     	; 0x1a6 <__vector_12+0xb2>
	else if (currentValue > servo_targetValue)
 17a:	a7 01       	movw	r20, r14
 17c:	96 01       	movw	r18, r12
 17e:	c5 01       	movw	r24, r10
 180:	b4 01       	movw	r22, r8
 182:	b3 d0       	rcall	.+358    	; 0x2ea <__cmpsf2>
 184:	88 23       	and	r24, r24
 186:	7c f4       	brge	.+30     	; 0x1a6 <__vector_12+0xb2>
	currentValue -= speed;
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e8       	ldi	r20, 0x80	; 128
 18e:	5f e3       	ldi	r21, 0x3F	; 63
 190:	c7 01       	movw	r24, r14
 192:	b6 01       	movw	r22, r12
 194:	45 d0       	rcall	.+138    	; 0x220 <__subsf3>
 196:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	OCR1A = currentValue;
 1a6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b6:	9d d0       	rcall	.+314    	; 0x2f2 <__fixunssfsi>
 1b8:	7b bd       	out	0x2b, r23	; 43
 1ba:	6a bd       	out	0x2a, r22	; 42
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	bf 90       	pop	r11
 1de:	af 90       	pop	r10
 1e0:	9f 90       	pop	r9
 1e2:	8f 90       	pop	r8
 1e4:	0f 90       	pop	r0
 1e6:	0b be       	out	0x3b, r0	; 59
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <servo1_init>:

void servo1_init()
{
	DDRB = 0xFF;				// Set whole port B as output
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	87 bb       	out	0x17, r24	; 23
	
	OCR1A = 250; //MAP(startValue);	// Sets the compare value of timer 1, (this is linked to port B5)
 1f6:	8a ef       	ldi	r24, 0xFA	; 250
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	9b bd       	out	0x2b, r25	; 43
 1fc:	8a bd       	out	0x2a, r24	; 42
	servo_targetValue = startValue;
 1fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <servo_targetValue+0x1>
 202:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servo_targetValue>
	
	TIMSK |= 1<<(4);			// Turn on compare mode
 206:	87 b7       	in	r24, 0x37	; 55
 208:	80 61       	ori	r24, 0x10	; 16
 20a:	87 bf       	out	0x37, r24	; 55
	sei();						// Turn on interrupt system
 20c:	78 94       	sei
	
	ICR1 = 10000;				// Sets the upper limit to timer 1
 20e:	80 e1       	ldi	r24, 0x10	; 16
 210:	97 e2       	ldi	r25, 0x27	; 39
 212:	97 bd       	out	0x27, r25	; 39
 214:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10000010;		// Set OC1A as output
 216:	82 e8       	ldi	r24, 0x82	; 130
 218:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
 21a:	82 e1       	ldi	r24, 0x12	; 18
 21c:	8e bd       	out	0x2e, r24	; 46
 21e:	08 95       	ret

00000220 <__subsf3>:
 220:	50 58       	subi	r21, 0x80	; 128

00000222 <__addsf3>:
 222:	bb 27       	eor	r27, r27
 224:	aa 27       	eor	r26, r26
 226:	0e d0       	rcall	.+28     	; 0x244 <__addsf3x>
 228:	08 c1       	rjmp	.+528    	; 0x43a <__fp_round>
 22a:	f9 d0       	rcall	.+498    	; 0x41e <__fp_pscA>
 22c:	30 f0       	brcs	.+12     	; 0x23a <__addsf3+0x18>
 22e:	fe d0       	rcall	.+508    	; 0x42c <__fp_pscB>
 230:	20 f0       	brcs	.+8      	; 0x23a <__addsf3+0x18>
 232:	31 f4       	brne	.+12     	; 0x240 <__addsf3+0x1e>
 234:	9f 3f       	cpi	r25, 0xFF	; 255
 236:	11 f4       	brne	.+4      	; 0x23c <__addsf3+0x1a>
 238:	1e f4       	brtc	.+6      	; 0x240 <__addsf3+0x1e>
 23a:	ee c0       	rjmp	.+476    	; 0x418 <__fp_nan>
 23c:	0e f4       	brtc	.+2      	; 0x240 <__addsf3+0x1e>
 23e:	e0 95       	com	r30
 240:	e7 fb       	bst	r30, 7
 242:	e4 c0       	rjmp	.+456    	; 0x40c <__fp_inf>

00000244 <__addsf3x>:
 244:	e9 2f       	mov	r30, r25
 246:	0a d1       	rcall	.+532    	; 0x45c <__fp_split3>
 248:	80 f3       	brcs	.-32     	; 0x22a <__addsf3+0x8>
 24a:	ba 17       	cp	r27, r26
 24c:	62 07       	cpc	r22, r18
 24e:	73 07       	cpc	r23, r19
 250:	84 07       	cpc	r24, r20
 252:	95 07       	cpc	r25, r21
 254:	18 f0       	brcs	.+6      	; 0x25c <__addsf3x+0x18>
 256:	71 f4       	brne	.+28     	; 0x274 <__addsf3x+0x30>
 258:	9e f5       	brtc	.+102    	; 0x2c0 <__addsf3x+0x7c>
 25a:	22 c1       	rjmp	.+580    	; 0x4a0 <__fp_zero>
 25c:	0e f4       	brtc	.+2      	; 0x260 <__addsf3x+0x1c>
 25e:	e0 95       	com	r30
 260:	0b 2e       	mov	r0, r27
 262:	ba 2f       	mov	r27, r26
 264:	a0 2d       	mov	r26, r0
 266:	0b 01       	movw	r0, r22
 268:	b9 01       	movw	r22, r18
 26a:	90 01       	movw	r18, r0
 26c:	0c 01       	movw	r0, r24
 26e:	ca 01       	movw	r24, r20
 270:	a0 01       	movw	r20, r0
 272:	11 24       	eor	r1, r1
 274:	ff 27       	eor	r31, r31
 276:	59 1b       	sub	r21, r25
 278:	99 f0       	breq	.+38     	; 0x2a0 <__addsf3x+0x5c>
 27a:	59 3f       	cpi	r21, 0xF9	; 249
 27c:	50 f4       	brcc	.+20     	; 0x292 <__addsf3x+0x4e>
 27e:	50 3e       	cpi	r21, 0xE0	; 224
 280:	68 f1       	brcs	.+90     	; 0x2dc <__addsf3x+0x98>
 282:	1a 16       	cp	r1, r26
 284:	f0 40       	sbci	r31, 0x00	; 0
 286:	a2 2f       	mov	r26, r18
 288:	23 2f       	mov	r18, r19
 28a:	34 2f       	mov	r19, r20
 28c:	44 27       	eor	r20, r20
 28e:	58 5f       	subi	r21, 0xF8	; 248
 290:	f3 cf       	rjmp	.-26     	; 0x278 <__addsf3x+0x34>
 292:	46 95       	lsr	r20
 294:	37 95       	ror	r19
 296:	27 95       	ror	r18
 298:	a7 95       	ror	r26
 29a:	f0 40       	sbci	r31, 0x00	; 0
 29c:	53 95       	inc	r21
 29e:	c9 f7       	brne	.-14     	; 0x292 <__addsf3x+0x4e>
 2a0:	7e f4       	brtc	.+30     	; 0x2c0 <__addsf3x+0x7c>
 2a2:	1f 16       	cp	r1, r31
 2a4:	ba 0b       	sbc	r27, r26
 2a6:	62 0b       	sbc	r22, r18
 2a8:	73 0b       	sbc	r23, r19
 2aa:	84 0b       	sbc	r24, r20
 2ac:	ba f0       	brmi	.+46     	; 0x2dc <__addsf3x+0x98>
 2ae:	91 50       	subi	r25, 0x01	; 1
 2b0:	a1 f0       	breq	.+40     	; 0x2da <__addsf3x+0x96>
 2b2:	ff 0f       	add	r31, r31
 2b4:	bb 1f       	adc	r27, r27
 2b6:	66 1f       	adc	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	88 1f       	adc	r24, r24
 2bc:	c2 f7       	brpl	.-16     	; 0x2ae <__addsf3x+0x6a>
 2be:	0e c0       	rjmp	.+28     	; 0x2dc <__addsf3x+0x98>
 2c0:	ba 0f       	add	r27, r26
 2c2:	62 1f       	adc	r22, r18
 2c4:	73 1f       	adc	r23, r19
 2c6:	84 1f       	adc	r24, r20
 2c8:	48 f4       	brcc	.+18     	; 0x2dc <__addsf3x+0x98>
 2ca:	87 95       	ror	r24
 2cc:	77 95       	ror	r23
 2ce:	67 95       	ror	r22
 2d0:	b7 95       	ror	r27
 2d2:	f7 95       	ror	r31
 2d4:	9e 3f       	cpi	r25, 0xFE	; 254
 2d6:	08 f0       	brcs	.+2      	; 0x2da <__addsf3x+0x96>
 2d8:	b3 cf       	rjmp	.-154    	; 0x240 <__addsf3+0x1e>
 2da:	93 95       	inc	r25
 2dc:	88 0f       	add	r24, r24
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <__addsf3x+0x9e>
 2e0:	99 27       	eor	r25, r25
 2e2:	ee 0f       	add	r30, r30
 2e4:	97 95       	ror	r25
 2e6:	87 95       	ror	r24
 2e8:	08 95       	ret

000002ea <__cmpsf2>:
 2ea:	6c d0       	rcall	.+216    	; 0x3c4 <__fp_cmp>
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <__cmpsf2+0x6>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret

000002f2 <__fixunssfsi>:
 2f2:	bc d0       	rcall	.+376    	; 0x46c <__fp_splitA>
 2f4:	88 f0       	brcs	.+34     	; 0x318 <__fixunssfsi+0x26>
 2f6:	9f 57       	subi	r25, 0x7F	; 127
 2f8:	90 f0       	brcs	.+36     	; 0x31e <__fixunssfsi+0x2c>
 2fa:	b9 2f       	mov	r27, r25
 2fc:	99 27       	eor	r25, r25
 2fe:	b7 51       	subi	r27, 0x17	; 23
 300:	a0 f0       	brcs	.+40     	; 0x32a <__fixunssfsi+0x38>
 302:	d1 f0       	breq	.+52     	; 0x338 <__fixunssfsi+0x46>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	1a f0       	brmi	.+6      	; 0x314 <__fixunssfsi+0x22>
 30e:	ba 95       	dec	r27
 310:	c9 f7       	brne	.-14     	; 0x304 <__fixunssfsi+0x12>
 312:	12 c0       	rjmp	.+36     	; 0x338 <__fixunssfsi+0x46>
 314:	b1 30       	cpi	r27, 0x01	; 1
 316:	81 f0       	breq	.+32     	; 0x338 <__fixunssfsi+0x46>
 318:	c3 d0       	rcall	.+390    	; 0x4a0 <__fp_zero>
 31a:	b1 e0       	ldi	r27, 0x01	; 1
 31c:	08 95       	ret
 31e:	c0 c0       	rjmp	.+384    	; 0x4a0 <__fp_zero>
 320:	67 2f       	mov	r22, r23
 322:	78 2f       	mov	r23, r24
 324:	88 27       	eor	r24, r24
 326:	b8 5f       	subi	r27, 0xF8	; 248
 328:	39 f0       	breq	.+14     	; 0x338 <__fixunssfsi+0x46>
 32a:	b9 3f       	cpi	r27, 0xF9	; 249
 32c:	cc f3       	brlt	.-14     	; 0x320 <__fixunssfsi+0x2e>
 32e:	86 95       	lsr	r24
 330:	77 95       	ror	r23
 332:	67 95       	ror	r22
 334:	b3 95       	inc	r27
 336:	d9 f7       	brne	.-10     	; 0x32e <__fixunssfsi+0x3c>
 338:	3e f4       	brtc	.+14     	; 0x348 <__fixunssfsi+0x56>
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	08 95       	ret

0000034a <__floatunsisf>:
 34a:	e8 94       	clt
 34c:	09 c0       	rjmp	.+18     	; 0x360 <__floatsisf+0x12>

0000034e <__floatsisf>:
 34e:	97 fb       	bst	r25, 7
 350:	3e f4       	brtc	.+14     	; 0x360 <__floatsisf+0x12>
 352:	90 95       	com	r25
 354:	80 95       	com	r24
 356:	70 95       	com	r23
 358:	61 95       	neg	r22
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	8f 4f       	sbci	r24, 0xFF	; 255
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	99 23       	and	r25, r25
 362:	a9 f0       	breq	.+42     	; 0x38e <__floatsisf+0x40>
 364:	f9 2f       	mov	r31, r25
 366:	96 e9       	ldi	r25, 0x96	; 150
 368:	bb 27       	eor	r27, r27
 36a:	93 95       	inc	r25
 36c:	f6 95       	lsr	r31
 36e:	87 95       	ror	r24
 370:	77 95       	ror	r23
 372:	67 95       	ror	r22
 374:	b7 95       	ror	r27
 376:	f1 11       	cpse	r31, r1
 378:	f8 cf       	rjmp	.-16     	; 0x36a <__floatsisf+0x1c>
 37a:	fa f4       	brpl	.+62     	; 0x3ba <__floatsisf+0x6c>
 37c:	bb 0f       	add	r27, r27
 37e:	11 f4       	brne	.+4      	; 0x384 <__floatsisf+0x36>
 380:	60 ff       	sbrs	r22, 0
 382:	1b c0       	rjmp	.+54     	; 0x3ba <__floatsisf+0x6c>
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8f 4f       	sbci	r24, 0xFF	; 255
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	16 c0       	rjmp	.+44     	; 0x3ba <__floatsisf+0x6c>
 38e:	88 23       	and	r24, r24
 390:	11 f0       	breq	.+4      	; 0x396 <__floatsisf+0x48>
 392:	96 e9       	ldi	r25, 0x96	; 150
 394:	11 c0       	rjmp	.+34     	; 0x3b8 <__floatsisf+0x6a>
 396:	77 23       	and	r23, r23
 398:	21 f0       	breq	.+8      	; 0x3a2 <__floatsisf+0x54>
 39a:	9e e8       	ldi	r25, 0x8E	; 142
 39c:	87 2f       	mov	r24, r23
 39e:	76 2f       	mov	r23, r22
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <__floatsisf+0x5e>
 3a2:	66 23       	and	r22, r22
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <__floatsisf+0x74>
 3a6:	96 e8       	ldi	r25, 0x86	; 134
 3a8:	86 2f       	mov	r24, r22
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	2a f0       	brmi	.+10     	; 0x3ba <__floatsisf+0x6c>
 3b0:	9a 95       	dec	r25
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	da f7       	brpl	.-10     	; 0x3b0 <__floatsisf+0x62>
 3ba:	88 0f       	add	r24, r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	97 f9       	bld	r25, 7
 3c2:	08 95       	ret

000003c4 <__fp_cmp>:
 3c4:	99 0f       	add	r25, r25
 3c6:	00 08       	sbc	r0, r0
 3c8:	55 0f       	add	r21, r21
 3ca:	aa 0b       	sbc	r26, r26
 3cc:	e0 e8       	ldi	r30, 0x80	; 128
 3ce:	fe ef       	ldi	r31, 0xFE	; 254
 3d0:	16 16       	cp	r1, r22
 3d2:	17 06       	cpc	r1, r23
 3d4:	e8 07       	cpc	r30, r24
 3d6:	f9 07       	cpc	r31, r25
 3d8:	c0 f0       	brcs	.+48     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3da:	12 16       	cp	r1, r18
 3dc:	13 06       	cpc	r1, r19
 3de:	e4 07       	cpc	r30, r20
 3e0:	f5 07       	cpc	r31, r21
 3e2:	98 f0       	brcs	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e4:	62 1b       	sub	r22, r18
 3e6:	73 0b       	sbc	r23, r19
 3e8:	84 0b       	sbc	r24, r20
 3ea:	95 0b       	sbc	r25, r21
 3ec:	39 f4       	brne	.+14     	; 0x3fc <__fp_cmp+0x38>
 3ee:	0a 26       	eor	r0, r26
 3f0:	61 f0       	breq	.+24     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f2:	23 2b       	or	r18, r19
 3f4:	24 2b       	or	r18, r20
 3f6:	25 2b       	or	r18, r21
 3f8:	21 f4       	brne	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	08 95       	ret
 3fc:	0a 26       	eor	r0, r26
 3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	a1 40       	sbci	r26, 0x01	; 1
 402:	a6 95       	lsr	r26
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	81 1d       	adc	r24, r1
 408:	81 1d       	adc	r24, r1
 40a:	08 95       	ret

0000040c <__fp_inf>:
 40c:	97 f9       	bld	r25, 7
 40e:	9f 67       	ori	r25, 0x7F	; 127
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	08 95       	ret

00000418 <__fp_nan>:
 418:	9f ef       	ldi	r25, 0xFF	; 255
 41a:	80 ec       	ldi	r24, 0xC0	; 192
 41c:	08 95       	ret

0000041e <__fp_pscA>:
 41e:	00 24       	eor	r0, r0
 420:	0a 94       	dec	r0
 422:	16 16       	cp	r1, r22
 424:	17 06       	cpc	r1, r23
 426:	18 06       	cpc	r1, r24
 428:	09 06       	cpc	r0, r25
 42a:	08 95       	ret

0000042c <__fp_pscB>:
 42c:	00 24       	eor	r0, r0
 42e:	0a 94       	dec	r0
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	14 06       	cpc	r1, r20
 436:	05 06       	cpc	r0, r21
 438:	08 95       	ret

0000043a <__fp_round>:
 43a:	09 2e       	mov	r0, r25
 43c:	03 94       	inc	r0
 43e:	00 0c       	add	r0, r0
 440:	11 f4       	brne	.+4      	; 0x446 <__fp_round+0xc>
 442:	88 23       	and	r24, r24
 444:	52 f0       	brmi	.+20     	; 0x45a <__fp_round+0x20>
 446:	bb 0f       	add	r27, r27
 448:	40 f4       	brcc	.+16     	; 0x45a <__fp_round+0x20>
 44a:	bf 2b       	or	r27, r31
 44c:	11 f4       	brne	.+4      	; 0x452 <__fp_round+0x18>
 44e:	60 ff       	sbrs	r22, 0
 450:	04 c0       	rjmp	.+8      	; 0x45a <__fp_round+0x20>
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__fp_split3>:
 45c:	57 fd       	sbrc	r21, 7
 45e:	90 58       	subi	r25, 0x80	; 128
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	59 f0       	breq	.+22     	; 0x47c <__fp_splitA+0x10>
 466:	5f 3f       	cpi	r21, 0xFF	; 255
 468:	71 f0       	breq	.+28     	; 0x486 <__fp_splitA+0x1a>
 46a:	47 95       	ror	r20

0000046c <__fp_splitA>:
 46c:	88 0f       	add	r24, r24
 46e:	97 fb       	bst	r25, 7
 470:	99 1f       	adc	r25, r25
 472:	61 f0       	breq	.+24     	; 0x48c <__fp_splitA+0x20>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	79 f0       	breq	.+30     	; 0x496 <__fp_splitA+0x2a>
 478:	87 95       	ror	r24
 47a:	08 95       	ret
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	55 1f       	adc	r21, r21
 484:	f2 cf       	rjmp	.-28     	; 0x46a <__fp_split3+0xe>
 486:	46 95       	lsr	r20
 488:	f1 df       	rcall	.-30     	; 0x46c <__fp_splitA>
 48a:	08 c0       	rjmp	.+16     	; 0x49c <__fp_splitA+0x30>
 48c:	16 16       	cp	r1, r22
 48e:	17 06       	cpc	r1, r23
 490:	18 06       	cpc	r1, r24
 492:	99 1f       	adc	r25, r25
 494:	f1 cf       	rjmp	.-30     	; 0x478 <__fp_splitA+0xc>
 496:	86 95       	lsr	r24
 498:	71 05       	cpc	r23, r1
 49a:	61 05       	cpc	r22, r1
 49c:	08 94       	sec
 49e:	08 95       	ret

000004a0 <__fp_zero>:
 4a0:	e8 94       	clt

000004a2 <__fp_szero>:
 4a2:	bb 27       	eor	r27, r27
 4a4:	66 27       	eor	r22, r22
 4a6:	77 27       	eor	r23, r23
 4a8:	cb 01       	movw	r24, r22
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret

000004ae <__gesf2>:
 4ae:	8a df       	rcall	.-236    	; 0x3c4 <__fp_cmp>
 4b0:	08 f4       	brcc	.+2      	; 0x4b4 <__gesf2+0x6>
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
