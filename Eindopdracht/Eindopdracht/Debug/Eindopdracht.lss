
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a90  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d0  00000000  00000000  000024ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	6d c0       	rjmp	.+218    	; 0x10c <__vector_12>
  32:	00 00       	nop
  34:	ea c0       	rjmp	.+468    	; 0x20a <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	11 d0       	rcall	.+34     	; 0xcc <main>
  aa:	93 c2       	rjmp	.+1318   	; 0x5d2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
	return 1;
}

void wait(int ms)
{
	for (int tms=0; tms<ms; tms++)
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <wait+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <wait+0x10>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	ac f3       	brlt	.-22     	; 0xb4 <wait+0x6>
		_delay_ms(1);
  ca:	08 95       	ret

000000cc <main>:
int servo2_targetValue;


int main( void )
{
	DDRB = 0xFF;				// Set whole port B as output
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	87 bb       	out	0x17, r24	; 23
	servo_init();
  d0:	1b d1       	rcall	.+566    	; 0x308 <servo_init>
	
	while (1)
	{		
		servo1_targetValue = 1500;
  d2:	8c ed       	ldi	r24, 0xDC	; 220
  d4:	95 e0       	ldi	r25, 0x05	; 5
  d6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <servo1_targetValue+0x1>
  da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo1_targetValue>
		servo2_targetValue = 250;
  de:	ca ef       	ldi	r28, 0xFA	; 250
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	d0 93 0b 01 	sts	0x010B, r29	; 0x80010b <servo2_targetValue+0x1>
  e6:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <servo2_targetValue>
		wait(10000);
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	97 e2       	ldi	r25, 0x27	; 39
  ee:	df df       	rcall	.-66     	; 0xae <wait>
		servo1_targetValue = 250;
  f0:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <servo1_targetValue+0x1>
  f4:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <servo1_targetValue>
		servo2_targetValue = 2500;
  f8:	84 ec       	ldi	r24, 0xC4	; 196
  fa:	99 e0       	ldi	r25, 0x09	; 9
  fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <servo2_targetValue+0x1>
 100:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <servo2_targetValue>
		wait(10000);
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	97 e2       	ldi	r25, 0x27	; 39
 108:	d2 df       	rcall	.-92     	; 0xae <wait>
 10a:	e3 cf       	rjmp	.-58     	; 0xd2 <main+0x6>

0000010c <__vector_12>:
int servo1_targetValue;
int servo2_targetValue;


ISR(TIMER1_COMPA_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	0b b6       	in	r0, 0x3b	; 59
 118:	0f 92       	push	r0
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	static float currentValue = startValue;
	
	// Maps the value from 0-180 to 250-1500 (frequency of the servo)
	//float targetValue = MAP(servo_targetValue);
	
	if (currentValue < servo1_targetValue)
 142:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <servo1_targetValue>
 146:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <servo1_targetValue+0x1>
 14a:	07 2e       	mov	r0, r23
 14c:	00 0c       	add	r0, r0
 14e:	88 0b       	sbc	r24, r24
 150:	99 0b       	sbc	r25, r25
 152:	8b d1       	rcall	.+790    	; 0x46a <__floatsisf>
 154:	4b 01       	movw	r8, r22
 156:	5c 01       	movw	r10, r24
 158:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <currentValue.1943>
 15c:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <currentValue.1943+0x1>
 160:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <currentValue.1943+0x2>
 164:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <currentValue.1943+0x3>
 168:	a7 01       	movw	r20, r14
 16a:	96 01       	movw	r18, r12
 16c:	2e d2       	rcall	.+1116   	; 0x5ca <__gesf2>
 16e:	18 16       	cp	r1, r24
 170:	84 f4       	brge	.+32     	; 0x192 <__vector_12+0x86>
	currentValue += speed;
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e8       	ldi	r20, 0x80	; 128
 178:	5f e3       	ldi	r21, 0x3F	; 63
 17a:	c7 01       	movw	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	df d0       	rcall	.+446    	; 0x33e <__addsf3>
 180:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <currentValue.1943>
 184:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <currentValue.1943+0x1>
 188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <currentValue.1943+0x2>
 18c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <currentValue.1943+0x3>
 190:	16 c0       	rjmp	.+44     	; 0x1be <__vector_12+0xb2>
	else if (currentValue > servo1_targetValue)
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	c5 01       	movw	r24, r10
 198:	b4 01       	movw	r22, r8
 19a:	35 d1       	rcall	.+618    	; 0x406 <__cmpsf2>
 19c:	88 23       	and	r24, r24
 19e:	7c f4       	brge	.+30     	; 0x1be <__vector_12+0xb2>
	currentValue -= speed;
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5f e3       	ldi	r21, 0x3F	; 63
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	c7 d0       	rcall	.+398    	; 0x33c <__subsf3>
 1ae:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <currentValue.1943>
 1b2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <currentValue.1943+0x1>
 1b6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <currentValue.1943+0x2>
 1ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <currentValue.1943+0x3>
	
	OCR1A = currentValue;
 1be:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <currentValue.1943>
 1c2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <currentValue.1943+0x1>
 1c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <currentValue.1943+0x2>
 1ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <currentValue.1943+0x3>
 1ce:	1f d1       	rcall	.+574    	; 0x40e <__fixunssfsi>
 1d0:	7b bd       	out	0x2b, r23	; 43
 1d2:	6a bd       	out	0x2a, r22	; 42
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	0f 90       	pop	r0
 1fe:	0b be       	out	0x3b, r0	; 59
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_13>:

ISR(TIMER1_COMPB_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	0b b6       	in	r0, 0x3b	; 59
 216:	0f 92       	push	r0
 218:	8f 92       	push	r8
 21a:	9f 92       	push	r9
 21c:	af 92       	push	r10
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	static float currentValue = startValue;
	
	// Maps the value from 0-180 to 250-1500 (frequency of the servo)
	//float targetValue = MAP(servo_targetValue);
	
	if (currentValue < servo2_targetValue)
 240:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servo2_targetValue>
 244:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <servo2_targetValue+0x1>
 248:	07 2e       	mov	r0, r23
 24a:	00 0c       	add	r0, r0
 24c:	88 0b       	sbc	r24, r24
 24e:	99 0b       	sbc	r25, r25
 250:	0c d1       	rcall	.+536    	; 0x46a <__floatsisf>
 252:	4b 01       	movw	r8, r22
 254:	5c 01       	movw	r10, r24
 256:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25a:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25e:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 262:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	af d1       	rcall	.+862    	; 0x5ca <__gesf2>
 26c:	18 16       	cp	r1, r24
 26e:	84 f4       	brge	.+32     	; 0x290 <__vector_13+0x86>
	currentValue += speed;
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e8       	ldi	r20, 0x80	; 128
 276:	5f e3       	ldi	r21, 0x3F	; 63
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	60 d0       	rcall	.+192    	; 0x33e <__addsf3>
 27e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 286:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 28a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 28e:	16 c0       	rjmp	.+44     	; 0x2bc <__vector_13+0xb2>
	else if (currentValue > servo2_targetValue)
 290:	a7 01       	movw	r20, r14
 292:	96 01       	movw	r18, r12
 294:	c5 01       	movw	r24, r10
 296:	b4 01       	movw	r22, r8
 298:	b6 d0       	rcall	.+364    	; 0x406 <__cmpsf2>
 29a:	88 23       	and	r24, r24
 29c:	7c f4       	brge	.+30     	; 0x2bc <__vector_13+0xb2>
	currentValue -= speed;
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e8       	ldi	r20, 0x80	; 128
 2a4:	5f e3       	ldi	r21, 0x3F	; 63
 2a6:	c7 01       	movw	r24, r14
 2a8:	b6 01       	movw	r22, r12
 2aa:	48 d0       	rcall	.+144    	; 0x33c <__subsf3>
 2ac:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	OCR1B = currentValue;
 2bc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2cc:	a0 d0       	rcall	.+320    	; 0x40e <__fixunssfsi>
 2ce:	79 bd       	out	0x29, r23	; 41
 2d0:	68 bd       	out	0x28, r22	; 40
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	df 90       	pop	r13
 2f0:	cf 90       	pop	r12
 2f2:	bf 90       	pop	r11
 2f4:	af 90       	pop	r10
 2f6:	9f 90       	pop	r9
 2f8:	8f 90       	pop	r8
 2fa:	0f 90       	pop	r0
 2fc:	0b be       	out	0x3b, r0	; 59
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <servo_init>:
	//TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
//}

void servo_init()
{
	OCR1A = 250;				// Sets the compare value of timer 1, (this is linked to port B5)
 308:	8a ef       	ldi	r24, 0xFA	; 250
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	9b bd       	out	0x2b, r25	; 43
 30e:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 250;				// Sets the compare value of timer 1, (this is linked to port B6)
 310:	99 bd       	out	0x29, r25	; 41
 312:	88 bd       	out	0x28, r24	; 40
	servo2_targetValue = startValue;
 314:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <servo2_targetValue+0x1>
 318:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <servo2_targetValue>
	
	TIMSK |= 1<<(3);			// Turn on compare mode for channel A
 31c:	87 b7       	in	r24, 0x37	; 55
 31e:	88 60       	ori	r24, 0x08	; 8
 320:	87 bf       	out	0x37, r24	; 55
	TIMSK |= 1<<(4);			// Turn on compare mode for channel B
 322:	87 b7       	in	r24, 0x37	; 55
 324:	80 61       	ori	r24, 0x10	; 16
 326:	87 bf       	out	0x37, r24	; 55
	sei();						// Turn on interrupt system
 328:	78 94       	sei
	
	ICR1 = 10000;				// Sets the upper limit to timer 1
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	97 e2       	ldi	r25, 0x27	; 39
 32e:	97 bd       	out	0x27, r25	; 39
 330:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10100010;		// Set OC1B as output
 332:	82 ea       	ldi	r24, 0xA2	; 162
 334:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
 336:	82 e1       	ldi	r24, 0x12	; 18
 338:	8e bd       	out	0x2e, r24	; 46
 33a:	08 95       	ret

0000033c <__subsf3>:
 33c:	50 58       	subi	r21, 0x80	; 128

0000033e <__addsf3>:
 33e:	bb 27       	eor	r27, r27
 340:	aa 27       	eor	r26, r26
 342:	0e d0       	rcall	.+28     	; 0x360 <__addsf3x>
 344:	08 c1       	rjmp	.+528    	; 0x556 <__fp_round>
 346:	f9 d0       	rcall	.+498    	; 0x53a <__fp_pscA>
 348:	30 f0       	brcs	.+12     	; 0x356 <__addsf3+0x18>
 34a:	fe d0       	rcall	.+508    	; 0x548 <__fp_pscB>
 34c:	20 f0       	brcs	.+8      	; 0x356 <__addsf3+0x18>
 34e:	31 f4       	brne	.+12     	; 0x35c <__addsf3+0x1e>
 350:	9f 3f       	cpi	r25, 0xFF	; 255
 352:	11 f4       	brne	.+4      	; 0x358 <__addsf3+0x1a>
 354:	1e f4       	brtc	.+6      	; 0x35c <__addsf3+0x1e>
 356:	ee c0       	rjmp	.+476    	; 0x534 <__fp_nan>
 358:	0e f4       	brtc	.+2      	; 0x35c <__addsf3+0x1e>
 35a:	e0 95       	com	r30
 35c:	e7 fb       	bst	r30, 7
 35e:	e4 c0       	rjmp	.+456    	; 0x528 <__fp_inf>

00000360 <__addsf3x>:
 360:	e9 2f       	mov	r30, r25
 362:	0a d1       	rcall	.+532    	; 0x578 <__fp_split3>
 364:	80 f3       	brcs	.-32     	; 0x346 <__addsf3+0x8>
 366:	ba 17       	cp	r27, r26
 368:	62 07       	cpc	r22, r18
 36a:	73 07       	cpc	r23, r19
 36c:	84 07       	cpc	r24, r20
 36e:	95 07       	cpc	r25, r21
 370:	18 f0       	brcs	.+6      	; 0x378 <__addsf3x+0x18>
 372:	71 f4       	brne	.+28     	; 0x390 <__addsf3x+0x30>
 374:	9e f5       	brtc	.+102    	; 0x3dc <__addsf3x+0x7c>
 376:	22 c1       	rjmp	.+580    	; 0x5bc <__fp_zero>
 378:	0e f4       	brtc	.+2      	; 0x37c <__addsf3x+0x1c>
 37a:	e0 95       	com	r30
 37c:	0b 2e       	mov	r0, r27
 37e:	ba 2f       	mov	r27, r26
 380:	a0 2d       	mov	r26, r0
 382:	0b 01       	movw	r0, r22
 384:	b9 01       	movw	r22, r18
 386:	90 01       	movw	r18, r0
 388:	0c 01       	movw	r0, r24
 38a:	ca 01       	movw	r24, r20
 38c:	a0 01       	movw	r20, r0
 38e:	11 24       	eor	r1, r1
 390:	ff 27       	eor	r31, r31
 392:	59 1b       	sub	r21, r25
 394:	99 f0       	breq	.+38     	; 0x3bc <__addsf3x+0x5c>
 396:	59 3f       	cpi	r21, 0xF9	; 249
 398:	50 f4       	brcc	.+20     	; 0x3ae <__addsf3x+0x4e>
 39a:	50 3e       	cpi	r21, 0xE0	; 224
 39c:	68 f1       	brcs	.+90     	; 0x3f8 <__addsf3x+0x98>
 39e:	1a 16       	cp	r1, r26
 3a0:	f0 40       	sbci	r31, 0x00	; 0
 3a2:	a2 2f       	mov	r26, r18
 3a4:	23 2f       	mov	r18, r19
 3a6:	34 2f       	mov	r19, r20
 3a8:	44 27       	eor	r20, r20
 3aa:	58 5f       	subi	r21, 0xF8	; 248
 3ac:	f3 cf       	rjmp	.-26     	; 0x394 <__addsf3x+0x34>
 3ae:	46 95       	lsr	r20
 3b0:	37 95       	ror	r19
 3b2:	27 95       	ror	r18
 3b4:	a7 95       	ror	r26
 3b6:	f0 40       	sbci	r31, 0x00	; 0
 3b8:	53 95       	inc	r21
 3ba:	c9 f7       	brne	.-14     	; 0x3ae <__addsf3x+0x4e>
 3bc:	7e f4       	brtc	.+30     	; 0x3dc <__addsf3x+0x7c>
 3be:	1f 16       	cp	r1, r31
 3c0:	ba 0b       	sbc	r27, r26
 3c2:	62 0b       	sbc	r22, r18
 3c4:	73 0b       	sbc	r23, r19
 3c6:	84 0b       	sbc	r24, r20
 3c8:	ba f0       	brmi	.+46     	; 0x3f8 <__addsf3x+0x98>
 3ca:	91 50       	subi	r25, 0x01	; 1
 3cc:	a1 f0       	breq	.+40     	; 0x3f6 <__addsf3x+0x96>
 3ce:	ff 0f       	add	r31, r31
 3d0:	bb 1f       	adc	r27, r27
 3d2:	66 1f       	adc	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	c2 f7       	brpl	.-16     	; 0x3ca <__addsf3x+0x6a>
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <__addsf3x+0x98>
 3dc:	ba 0f       	add	r27, r26
 3de:	62 1f       	adc	r22, r18
 3e0:	73 1f       	adc	r23, r19
 3e2:	84 1f       	adc	r24, r20
 3e4:	48 f4       	brcc	.+18     	; 0x3f8 <__addsf3x+0x98>
 3e6:	87 95       	ror	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b7 95       	ror	r27
 3ee:	f7 95       	ror	r31
 3f0:	9e 3f       	cpi	r25, 0xFE	; 254
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__addsf3x+0x96>
 3f4:	b3 cf       	rjmp	.-154    	; 0x35c <__addsf3+0x1e>
 3f6:	93 95       	inc	r25
 3f8:	88 0f       	add	r24, r24
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__addsf3x+0x9e>
 3fc:	99 27       	eor	r25, r25
 3fe:	ee 0f       	add	r30, r30
 400:	97 95       	ror	r25
 402:	87 95       	ror	r24
 404:	08 95       	ret

00000406 <__cmpsf2>:
 406:	6c d0       	rcall	.+216    	; 0x4e0 <__fp_cmp>
 408:	08 f4       	brcc	.+2      	; 0x40c <__cmpsf2+0x6>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret

0000040e <__fixunssfsi>:
 40e:	bc d0       	rcall	.+376    	; 0x588 <__fp_splitA>
 410:	88 f0       	brcs	.+34     	; 0x434 <__fixunssfsi+0x26>
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	90 f0       	brcs	.+36     	; 0x43a <__fixunssfsi+0x2c>
 416:	b9 2f       	mov	r27, r25
 418:	99 27       	eor	r25, r25
 41a:	b7 51       	subi	r27, 0x17	; 23
 41c:	a0 f0       	brcs	.+40     	; 0x446 <__fixunssfsi+0x38>
 41e:	d1 f0       	breq	.+52     	; 0x454 <__fixunssfsi+0x46>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a f0       	brmi	.+6      	; 0x430 <__fixunssfsi+0x22>
 42a:	ba 95       	dec	r27
 42c:	c9 f7       	brne	.-14     	; 0x420 <__fixunssfsi+0x12>
 42e:	12 c0       	rjmp	.+36     	; 0x454 <__fixunssfsi+0x46>
 430:	b1 30       	cpi	r27, 0x01	; 1
 432:	81 f0       	breq	.+32     	; 0x454 <__fixunssfsi+0x46>
 434:	c3 d0       	rcall	.+390    	; 0x5bc <__fp_zero>
 436:	b1 e0       	ldi	r27, 0x01	; 1
 438:	08 95       	ret
 43a:	c0 c0       	rjmp	.+384    	; 0x5bc <__fp_zero>
 43c:	67 2f       	mov	r22, r23
 43e:	78 2f       	mov	r23, r24
 440:	88 27       	eor	r24, r24
 442:	b8 5f       	subi	r27, 0xF8	; 248
 444:	39 f0       	breq	.+14     	; 0x454 <__fixunssfsi+0x46>
 446:	b9 3f       	cpi	r27, 0xF9	; 249
 448:	cc f3       	brlt	.-14     	; 0x43c <__fixunssfsi+0x2e>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b3 95       	inc	r27
 452:	d9 f7       	brne	.-10     	; 0x44a <__fixunssfsi+0x3c>
 454:	3e f4       	brtc	.+14     	; 0x464 <__fixunssfsi+0x56>
 456:	90 95       	com	r25
 458:	80 95       	com	r24
 45a:	70 95       	com	r23
 45c:	61 95       	neg	r22
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	08 95       	ret

00000466 <__floatunsisf>:
 466:	e8 94       	clt
 468:	09 c0       	rjmp	.+18     	; 0x47c <__floatsisf+0x12>

0000046a <__floatsisf>:
 46a:	97 fb       	bst	r25, 7
 46c:	3e f4       	brtc	.+14     	; 0x47c <__floatsisf+0x12>
 46e:	90 95       	com	r25
 470:	80 95       	com	r24
 472:	70 95       	com	r23
 474:	61 95       	neg	r22
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	99 23       	and	r25, r25
 47e:	a9 f0       	breq	.+42     	; 0x4aa <__floatsisf+0x40>
 480:	f9 2f       	mov	r31, r25
 482:	96 e9       	ldi	r25, 0x96	; 150
 484:	bb 27       	eor	r27, r27
 486:	93 95       	inc	r25
 488:	f6 95       	lsr	r31
 48a:	87 95       	ror	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f1 11       	cpse	r31, r1
 494:	f8 cf       	rjmp	.-16     	; 0x486 <__floatsisf+0x1c>
 496:	fa f4       	brpl	.+62     	; 0x4d6 <__floatsisf+0x6c>
 498:	bb 0f       	add	r27, r27
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__floatsisf+0x36>
 49c:	60 ff       	sbrs	r22, 0
 49e:	1b c0       	rjmp	.+54     	; 0x4d6 <__floatsisf+0x6c>
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	16 c0       	rjmp	.+44     	; 0x4d6 <__floatsisf+0x6c>
 4aa:	88 23       	and	r24, r24
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <__floatsisf+0x48>
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__floatsisf+0x6a>
 4b2:	77 23       	and	r23, r23
 4b4:	21 f0       	breq	.+8      	; 0x4be <__floatsisf+0x54>
 4b6:	9e e8       	ldi	r25, 0x8E	; 142
 4b8:	87 2f       	mov	r24, r23
 4ba:	76 2f       	mov	r23, r22
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__floatsisf+0x5e>
 4be:	66 23       	and	r22, r22
 4c0:	71 f0       	breq	.+28     	; 0x4de <__floatsisf+0x74>
 4c2:	96 e8       	ldi	r25, 0x86	; 134
 4c4:	86 2f       	mov	r24, r22
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	2a f0       	brmi	.+10     	; 0x4d6 <__floatsisf+0x6c>
 4cc:	9a 95       	dec	r25
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	da f7       	brpl	.-10     	; 0x4cc <__floatsisf+0x62>
 4d6:	88 0f       	add	r24, r24
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <__fp_cmp>:
 4e0:	99 0f       	add	r25, r25
 4e2:	00 08       	sbc	r0, r0
 4e4:	55 0f       	add	r21, r21
 4e6:	aa 0b       	sbc	r26, r26
 4e8:	e0 e8       	ldi	r30, 0x80	; 128
 4ea:	fe ef       	ldi	r31, 0xFE	; 254
 4ec:	16 16       	cp	r1, r22
 4ee:	17 06       	cpc	r1, r23
 4f0:	e8 07       	cpc	r30, r24
 4f2:	f9 07       	cpc	r31, r25
 4f4:	c0 f0       	brcs	.+48     	; 0x526 <__fp_cmp+0x46>
 4f6:	12 16       	cp	r1, r18
 4f8:	13 06       	cpc	r1, r19
 4fa:	e4 07       	cpc	r30, r20
 4fc:	f5 07       	cpc	r31, r21
 4fe:	98 f0       	brcs	.+38     	; 0x526 <__fp_cmp+0x46>
 500:	62 1b       	sub	r22, r18
 502:	73 0b       	sbc	r23, r19
 504:	84 0b       	sbc	r24, r20
 506:	95 0b       	sbc	r25, r21
 508:	39 f4       	brne	.+14     	; 0x518 <__fp_cmp+0x38>
 50a:	0a 26       	eor	r0, r26
 50c:	61 f0       	breq	.+24     	; 0x526 <__fp_cmp+0x46>
 50e:	23 2b       	or	r18, r19
 510:	24 2b       	or	r18, r20
 512:	25 2b       	or	r18, r21
 514:	21 f4       	brne	.+8      	; 0x51e <__fp_cmp+0x3e>
 516:	08 95       	ret
 518:	0a 26       	eor	r0, r26
 51a:	09 f4       	brne	.+2      	; 0x51e <__fp_cmp+0x3e>
 51c:	a1 40       	sbci	r26, 0x01	; 1
 51e:	a6 95       	lsr	r26
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	81 1d       	adc	r24, r1
 524:	81 1d       	adc	r24, r1
 526:	08 95       	ret

00000528 <__fp_inf>:
 528:	97 f9       	bld	r25, 7
 52a:	9f 67       	ori	r25, 0x7F	; 127
 52c:	80 e8       	ldi	r24, 0x80	; 128
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	08 95       	ret

00000534 <__fp_nan>:
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	08 95       	ret

0000053a <__fp_pscA>:
 53a:	00 24       	eor	r0, r0
 53c:	0a 94       	dec	r0
 53e:	16 16       	cp	r1, r22
 540:	17 06       	cpc	r1, r23
 542:	18 06       	cpc	r1, r24
 544:	09 06       	cpc	r0, r25
 546:	08 95       	ret

00000548 <__fp_pscB>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	05 06       	cpc	r0, r21
 554:	08 95       	ret

00000556 <__fp_round>:
 556:	09 2e       	mov	r0, r25
 558:	03 94       	inc	r0
 55a:	00 0c       	add	r0, r0
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0xc>
 55e:	88 23       	and	r24, r24
 560:	52 f0       	brmi	.+20     	; 0x576 <__fp_round+0x20>
 562:	bb 0f       	add	r27, r27
 564:	40 f4       	brcc	.+16     	; 0x576 <__fp_round+0x20>
 566:	bf 2b       	or	r27, r31
 568:	11 f4       	brne	.+4      	; 0x56e <__fp_round+0x18>
 56a:	60 ff       	sbrs	r22, 0
 56c:	04 c0       	rjmp	.+8      	; 0x576 <__fp_round+0x20>
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__fp_split3>:
 578:	57 fd       	sbrc	r21, 7
 57a:	90 58       	subi	r25, 0x80	; 128
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	59 f0       	breq	.+22     	; 0x598 <__fp_splitA+0x10>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	71 f0       	breq	.+28     	; 0x5a2 <__fp_splitA+0x1a>
 586:	47 95       	ror	r20

00000588 <__fp_splitA>:
 588:	88 0f       	add	r24, r24
 58a:	97 fb       	bst	r25, 7
 58c:	99 1f       	adc	r25, r25
 58e:	61 f0       	breq	.+24     	; 0x5a8 <__fp_splitA+0x20>
 590:	9f 3f       	cpi	r25, 0xFF	; 255
 592:	79 f0       	breq	.+30     	; 0x5b2 <__fp_splitA+0x2a>
 594:	87 95       	ror	r24
 596:	08 95       	ret
 598:	12 16       	cp	r1, r18
 59a:	13 06       	cpc	r1, r19
 59c:	14 06       	cpc	r1, r20
 59e:	55 1f       	adc	r21, r21
 5a0:	f2 cf       	rjmp	.-28     	; 0x586 <__fp_split3+0xe>
 5a2:	46 95       	lsr	r20
 5a4:	f1 df       	rcall	.-30     	; 0x588 <__fp_splitA>
 5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <__fp_splitA+0x30>
 5a8:	16 16       	cp	r1, r22
 5aa:	17 06       	cpc	r1, r23
 5ac:	18 06       	cpc	r1, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	f1 cf       	rjmp	.-30     	; 0x594 <__fp_splitA+0xc>
 5b2:	86 95       	lsr	r24
 5b4:	71 05       	cpc	r23, r1
 5b6:	61 05       	cpc	r22, r1
 5b8:	08 94       	sec
 5ba:	08 95       	ret

000005bc <__fp_zero>:
 5bc:	e8 94       	clt

000005be <__fp_szero>:
 5be:	bb 27       	eor	r27, r27
 5c0:	66 27       	eor	r22, r22
 5c2:	77 27       	eor	r23, r23
 5c4:	cb 01       	movw	r24, r22
 5c6:	97 f9       	bld	r25, 7
 5c8:	08 95       	ret

000005ca <__gesf2>:
 5ca:	8a df       	rcall	.-236    	; 0x4e0 <__fp_cmp>
 5cc:	08 f4       	brcc	.+2      	; 0x5d0 <__gesf2+0x6>
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
