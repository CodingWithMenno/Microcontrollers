
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a59  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000940  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f6  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000021a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	11 d0       	rcall	.+34     	; 0xcc <main>
  aa:	bd c0       	rjmp	.+378    	; 0x226 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
	return 1;
}

void wait(int ms)
{
	for (int tms=0; tms<ms; tms++)
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <wait+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <wait+0x10>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	ac f3       	brlt	.-22     	; 0xb4 <wait+0x6>
		_delay_ms(1);
  ca:	08 95       	ret

000000cc <main>:
int servo_targetValue;


int main( void )
{
	servo1_init();
  cc:	6e d0       	rcall	.+220    	; 0x1aa <servo1_init>
	wait(1000);
  ce:	88 ee       	ldi	r24, 0xE8	; 232
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	ed df       	rcall	.-38     	; 0xae <wait>
	
	while (1)
	{
		if(servo_targetValue == 180)
  d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servo_targetValue>
  d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servo_targetValue+0x1>
  dc:	84 3b       	cpi	r24, 0xB4	; 180
  de:	91 05       	cpc	r25, r1
  e0:	29 f4       	brne	.+10     	; 0xec <main+0x20>
		{
			servo_targetValue = 0;
  e2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <servo_targetValue+0x1>
  e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <servo_targetValue>
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <main+0x2c>
		} else
		{
			servo_targetValue = 180;
  ec:	84 eb       	ldi	r24, 0xB4	; 180
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servo_targetValue+0x1>
  f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo_targetValue>
		}

		wait(5000);
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	d8 df       	rcall	.-80     	; 0xae <wait>
	}
  fe:	ea cf       	rjmp	.-44     	; 0xd4 <main+0x8>

00000100 <setPwmTargetValue>:
	TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
}

static void setPwmTargetValue(int value)
{
	OCR1A = value;
 100:	9b bd       	out	0x2b, r25	; 43
 102:	8a bd       	out	0x2a, r24	; 42
 104:	08 95       	ret

00000106 <__vector_12>:
// Extern variable for the servo target value
int servo_targetValue;


ISR(TIMER1_COMPA_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	0b b6       	in	r0, 0x3b	; 59
 112:	0f 92       	push	r0
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	// Go slow to target value
	const int speed = 1;
	static int currentValue = startValue;
	
	// Maps the value from 0-180 to 250-2500 (frequency of the servo)
	int targetValue = (servo_targetValue - 0) / (180 - 0) * (2500 - 250) + 250;
 12c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servo_targetValue>
 130:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servo_targetValue+0x1>
 134:	64 eb       	ldi	r22, 0xB4	; 180
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	4f d0       	rcall	.+158    	; 0x1d8 <__divmodhi4>
 13a:	8a ec       	ldi	r24, 0xCA	; 202
 13c:	98 e0       	ldi	r25, 0x08	; 8
 13e:	68 9f       	mul	r22, r24
 140:	90 01       	movw	r18, r0
 142:	69 9f       	mul	r22, r25
 144:	30 0d       	add	r19, r0
 146:	78 9f       	mul	r23, r24
 148:	30 0d       	add	r19, r0
 14a:	11 24       	eor	r1, r1
 14c:	26 50       	subi	r18, 0x06	; 6
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	if (currentValue < targetValue)
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	82 17       	cp	r24, r18
 15a:	93 07       	cpc	r25, r19
 15c:	34 f4       	brge	.+12     	; 0x16a <__vector_12+0x64>
	currentValue += speed;
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	08 c0       	rjmp	.+16     	; 0x17a <__vector_12+0x74>
	else if (currentValue > targetValue)
 16a:	28 17       	cp	r18, r24
 16c:	39 07       	cpc	r19, r25
 16e:	2c f4       	brge	.+10     	; 0x17a <__vector_12+0x74>
	currentValue -= speed;
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	setPwmTargetValue(currentValue);
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	be df       	rcall	.-132    	; 0x100 <setPwmTargetValue>
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0b be       	out	0x3b, r0	; 59
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <servo1_init>:

void servo1_init()
{
	DDRB = 0xFF;				// Set whole port B as output
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 bb       	out	0x17, r24	; 23
	
	OCR1A = (startValue - 0) / (180 - 0) * (2500 - 250) + 250;	// Sets the compare value of timer 1, (this is linked to port B5)
 1ae:	8a ef       	ldi	r24, 0xFA	; 250
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9b bd       	out	0x2b, r25	; 43
 1b4:	8a bd       	out	0x2a, r24	; 42
	servo_targetValue = startValue;
 1b6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <servo_targetValue+0x1>
 1ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <servo_targetValue>
	
	TIMSK |= 1<<(4);			// Turn on compare mode
 1be:	87 b7       	in	r24, 0x37	; 55
 1c0:	80 61       	ori	r24, 0x10	; 16
 1c2:	87 bf       	out	0x37, r24	; 55
	sei();						// Turn on interrupt system
 1c4:	78 94       	sei
	
	ICR1 = 10000;				// Sets the upper limit to timer 1
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	97 e2       	ldi	r25, 0x27	; 39
 1ca:	97 bd       	out	0x27, r25	; 39
 1cc:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10000010;		// Set OC1A as output
 1ce:	82 e8       	ldi	r24, 0x82	; 130
 1d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00010010;		// fast PWM 8 bit, prescaler=8, RUN
 1d2:	82 e1       	ldi	r24, 0x12	; 18
 1d4:	8e bd       	out	0x2e, r24	; 46
 1d6:	08 95       	ret

000001d8 <__divmodhi4>:
 1d8:	97 fb       	bst	r25, 7
 1da:	07 2e       	mov	r0, r23
 1dc:	16 f4       	brtc	.+4      	; 0x1e2 <__divmodhi4+0xa>
 1de:	00 94       	com	r0
 1e0:	06 d0       	rcall	.+12     	; 0x1ee <__divmodhi4_neg1>
 1e2:	77 fd       	sbrc	r23, 7
 1e4:	08 d0       	rcall	.+16     	; 0x1f6 <__divmodhi4_neg2>
 1e6:	0b d0       	rcall	.+22     	; 0x1fe <__udivmodhi4>
 1e8:	07 fc       	sbrc	r0, 7
 1ea:	05 d0       	rcall	.+10     	; 0x1f6 <__divmodhi4_neg2>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__divmodhi4_exit>

000001ee <__divmodhi4_neg1>:
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <__divmodhi4_neg2>:
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255

000001fc <__divmodhi4_exit>:
 1fc:	08 95       	ret

000001fe <__udivmodhi4>:
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	51 e1       	ldi	r21, 0x11	; 17
 204:	07 c0       	rjmp	.+14     	; 0x214 <__udivmodhi4_ep>

00000206 <__udivmodhi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a6 17       	cp	r26, r22
 20c:	b7 07       	cpc	r27, r23
 20e:	10 f0       	brcs	.+4      	; 0x214 <__udivmodhi4_ep>
 210:	a6 1b       	sub	r26, r22
 212:	b7 0b       	sbc	r27, r23

00000214 <__udivmodhi4_ep>:
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	5a 95       	dec	r21
 21a:	a9 f7       	brne	.-22     	; 0x206 <__udivmodhi4_loop>
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
